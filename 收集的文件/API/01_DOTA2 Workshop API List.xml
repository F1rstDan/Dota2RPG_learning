<?xml version="1.0" encoding="utf-8"?>
<!--CopyRight 2014 [AMHC]阿哈利姆魔法隐修议会 -->
<!--转载请联系无双(344380788) -->
<!--译者粗通DOTA2编辑器，翻译内容难免有些出入，若有建议，可以在官方论坛的API区提出；若有翻译错误等问题，请至http://www.dota2rpg.com/thread-1174-1-1.html发帖提出，或发送给Margaret_ocgcn联系方式Email至margaret4@126.com，QQ:450942584 -->
<!--本API汉化组成员如下：天才_IMBA(Global)、Diayfoo(CBaseEntity-CDOTA_Item_Pysical)、Hao(CDOTA_Item_DataDriven-CDOTA_BaseNPC)、cftx(CDOTA_BaseNPC_Hero-Vector) -->
<!--欢迎广大DOTA2开发者加入，为DOTA2 RPG新时代做贡献！ -->
<classes>
<!--以下部分由天才_IMBA翻译 -->

<!--以下部分由Diayfoo翻译 -->

<class nameEN="CBaseEntity" nameCN="基础实体"
	descriptionEN="The base class for stuff"
	descriptionCN="实体的基础类" extends="">
	<functions>
		<function name="ApplyAbsVelocityImpulse" signature="void ApplyAbsVelocityImpulse(Vector a)">
			<DescriptionEN>Apply a Velocity Impulse
			</DescriptionEN>
			<DescriptionCN>添加一个速度冲击</DescriptionCN>
			<HowToCall>
				<Parameter>a:添加的矢量
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ApplyLocalAngularVelocityImpulse" signature="void ApplyLocalAngularVelocityImpulse(Vector a)">
			<DescriptionEN>Apply an Ang Velocity Impulse
			</DescriptionEN>
			<DescriptionCN>添加一个角速度的冲击</DescriptionCN>
			<HowToCall>
				<Parameter>a:添加的矢量
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="EmitSound" signature="void EmitSound(string soundName)">
			<DescriptionEN>
			</DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter>string:添加的声音名字
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="EmitSoundParams" signature="void EmitSoundParams(string soundName, int pitch, float volume, float soundTime)">
			<DescriptionEN>Plays/modifies a sound from this entity. changes sound if Pitch and/or Volume or SoundTime is > 0.
			</DescriptionEN>
			<DescriptionCN>播放/修改这个实体的声音.当音调,音量或播放时间大于零时改变声音</DescriptionCN>
			<HowToCall>
				<Parameter>string:添加的声音名字 pitch:音调 volume:音量 soundTime:播放时间
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="EyeAngles" signature="QAngle EyeAngles()">
			<DescriptionEN>Get the qangles that this entity is looking at.
			</DescriptionEN>
			<DescriptionCN>获得这个实体的视角qangles</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>QAngle:?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="EyePosition" signature="Vector EyePosition()">
			<DescriptionEN>Get vector to eye position - absolute coords
			</DescriptionEN>
			<DescriptionCN>获得指向视角位置的矢量,位置为绝对坐标</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:指向视角位置的矢量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FirstMoveChild" signature="handle FirstMoveChild()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GatherCriteria" signature="void GatherCriteria(handle a)">
			<DescriptionEN>Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks.
			</DescriptionEN>
			<DescriptionCN>返回一个表包含用在这个实体的判定的标准.这个表等同于传入脚本方法的调用.</DescriptionCN>
			<HowToCall>
				<Parameter>handle:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAbsOrigin" signature="Vector GetAbsOrigin()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAngles" signature="QAngle GetAngles()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>QAngle:?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAnglesAsVector" signature="Vector GetAnglesAsVector()">
			<DescriptionEN>Get entity pitch, yaw, roll as a vector
			</DescriptionEN>
			<DescriptionCN>获得实体的间距,偏航,滚动的矢量?</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:间距,偏航,滚动的矢量?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAngularVelocity" signature="Vector GetAngularVelocity()">
			<DescriptionEN>Get the local angular velocity - returns a vector of pitch,yaw,roll
			</DescriptionEN>
			<DescriptionCN>获得当前角速度,返回间距,偏航,滚动的矢量?</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:间距,偏航,滚动的矢量?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBaseVelocity" signature="Vector GetBaseVelocity()">
			<DescriptionEN>Get Base velocity
			</DescriptionEN>
			<DescriptionCN>获得基础速度</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:基础速度的矢量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBoundingMaxs" signature="Vector GetBoundingMaxs()">
			<DescriptionEN>Get a vector containing max bounds, centered on object
			</DescriptionEN>
			<DescriptionCN>获得一个包含最大范围,以物体为中心的矢量</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:一个包含最大范围,以物体为中心的矢量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBoundingMins" signature="Vector GetBoundingMins()">
			<DescriptionEN>Get a vector containing min bounds, centered on object
			</DescriptionEN>
			<DescriptionCN>获得一个包含最小范围,以物体为中心的矢量</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:一个包含最小范围,以物体为中心的矢量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBounds" signature="table GetBounds()">
			<DescriptionEN>Get a table containing the 'Mins' &amp; 'Maxs' vector bounds, centered on object
			</DescriptionEN>
			<DescriptionCN>获得一个以物体为中心,包含最小和最大范围的矢量的表</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>table:一个以物体为中心,包含最小和最大范围的矢量的表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCenter" signature="Vector GetCenter()">
			<DescriptionEN>Get vector to center of object - absolute coords
			</DescriptionEN>
			<DescriptionCN>获得指向物体中心的矢量,以绝对坐标的形式</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:指向物体中心的矢量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetChildren" signature="handle GetChildren()">
			<DescriptionEN>Get the entities parented to this entity.
			</DescriptionEN>
			<DescriptionCN>获得继承这个实体的实体</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:继承这个实体的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetContext" signature="table GetContext(string a)">
			<DescriptionEN>GetContext( name ): looks up a context and returns it if available. May return string, float, or nil (if the context isn't found)
			</DescriptionEN>
			<DescriptionCN>GetContext( name ):检查一个对象的状态然后返回对象是否可用.可能返回string,float,或nil(如果对象没有找到)</DescriptionCN>
			<HowToCall>
				<Parameter>a:对象的名字
				</Parameter>
				<Return>table:对象的状态</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetForwardVector" signature="Vector GetForwardVector()">
			<DescriptionEN>Get the forward vector of the entity
			</DescriptionEN>
			<DescriptionCN>获得这个实体的前进矢量</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:实体的前进矢量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetHealth" signature="int GetHealth()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:生命值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetLocalAngularVelocity" signature="QAngle GetLocalAngularVelocity()">
			<DescriptionEN>Maybe local angvel
			</DescriptionEN>
			<DescriptionCN>可能为当前角度</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>QAngle:?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetLocalVelocity" signature="Vector GetLocalVelocity()">
			<DescriptionEN>Get Entity relative velocity
			</DescriptionEN>
			<DescriptionCN>获得实体相对速度</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:实体相对速度</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetMaxHealth" signature="int GetMaxHealth()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:最大生命值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetModelName" signature="string GetModelName()">
			<DescriptionEN>Returns the name of the model
			</DescriptionEN>
			<DescriptionCN>获得模型的名字</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:模型的名字</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetMoveParent" signature="handle GetMoveParent()">
			<DescriptionEN>If in hierarchy, retrieves the entity's parent
			</DescriptionEN>
			<DescriptionCN>如果在有继承对象,恢复实体所继承的对象</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:所继承的对象</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetOrigin" signature="Vector GetOrigin()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetOwner" signature="handle GetOwner()">
			<DescriptionEN>Gets this entity's owner
			</DescriptionEN>
			<DescriptionCN>获得实体的所有者</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:实体的所有者</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetOwnerEntity" signature="handle GetOwnerEntity()">
			<DescriptionEN>Get the owner entity, if there is one
			</DescriptionEN>
			<DescriptionCN>获得拥有者的实体,如果有的话</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:所有者的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetRightVector" signature="Vector GetRightVector()">
			<DescriptionEN>Get the right vector of the entity
			</DescriptionEN>
			<DescriptionCN>获得实体的右方矢量?</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:实体的右方矢量?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetRootMoveParent" signature="handle GetRootMoveParent()">
			<DescriptionEN>If in hierarchy, walks up the hierarchy to find the root parent
			</DescriptionEN>
			<DescriptionCN>如果在继承关系里,在继承关系中寻找所继承的根源对象</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:根源(父类)对象</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetSoundDuration" signature="float GetSoundDuration(string soundName, string actormodelname)">
			<DescriptionEN>Returns float duration of the sound. Takes soundname and optional actormodelname.
			</DescriptionEN>
			<DescriptionCN>返回声音的播放时间.传入声音名字和可选的应用模型名字.</DescriptionCN>
			<HowToCall>
				<Parameter>soundName:声音名字 actormodelname:应用的模型名字
				</Parameter>
				<Return>float:声音播放时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetTeam" signature="int GetTeam()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:实体所在队伍的索引</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetUpVector" signature="Vector GetUpVector()">
			<DescriptionEN>Get the up vector of the entity
			</DescriptionEN>
			<DescriptionCN>获得实体的右方矢量</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:实体的右方矢量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetUpVector" signature="Vector GetUpVector()">
			<DescriptionEN>Get the up vector of the entity
			</DescriptionEN>
			<DescriptionCN>获得实体的上方矢量</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:实体的上方矢量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetVelocity" signature="Vector GetVelocity()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:实体的速度矢量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsAlive" signature="bool IsAlive()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:实体是否生存</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsPlayer" signature="bool IsPlayer()">
			<DescriptionEN>Is this a player entity?
			</DescriptionEN>
			<DescriptionCN>是否为玩家的实体</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:是否为玩家的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="Kill" signature="void Kill()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>杀死实体</PS>
			</HowToCall>
		</function>
		
		<function name="NextMovePeer" signature="handle NextMovePeer()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:继承关系里下一个同级实体.</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="OverrideFriction" signature="void OverrideFriction(float a, float b)">
			<DescriptionEN>Takes duration, value for a temporary override
			</DescriptionEN>
			<DescriptionCN>暂时重写阻力的持续时间和值</DescriptionCN>
			<HowToCall>
				<Parameter>a:持续时间? b:大小的值?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="PrecacheScriptSound" signature="void PrecacheScriptSound(string a)">
			<DescriptionEN>Precache a sound for later playing.
			</DescriptionEN>
			<DescriptionCN>预载声音文件</DescriptionCN>
			<HowToCall>
				<Parameter>a:声音的名字
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetAbsOrigin" signature="void SetAbsOrigin(Vector origin)">
			<DescriptionEN>SetAbsOrigin
			</DescriptionEN>
			<DescriptionCN>设置AbsOrigin</DescriptionCN>
			<HowToCall>
				<Parameter>origin:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetAngles" signature="void SetAngles(float pitch, float yaw, float roll)">
			<DescriptionEN>Set entity pitch, yaw, roll
			</DescriptionEN>
			<DescriptionCN>设置实体的距离,偏航,翻滚?</DescriptionCN>
			<HowToCall>
				<Parameter>pitch:距离 yaw:偏航 roll:翻滚?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetAngularVelocity" signature="void SetAngularVelocity(float pitch, float yaw, float roll)">
			<DescriptionEN>Set the local angular velocity - takes float pitch,yaw,roll velocities
			</DescriptionEN>
			<DescriptionCN>设置当前角速度,使用float距离,偏航,翻滚速度</DescriptionCN>
			<HowToCall>
				<Parameter>pitch:距离 yaw:偏航 roll:翻滚?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetContext" signature="void SetContext(string a, string b, float c)">
			<DescriptionEN>SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever').
			</DescriptionEN>
			<DescriptionCN>SetContext( 名字 , 值, 持续时间 ):存储任何在实体对话内容里的配对值.值是一个字符串.持续一段时间.(0代表永久)</DescriptionCN>
			<HowToCall>
				<Parameter>a:名字 b:配对值 c:持续时间
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetContextNum" signature="void SetContextNum(string a, float b, float c)">
			<DescriptionEN>SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever').
			</DescriptionEN>
			<DescriptionCN>SetContext( 名字 , 值, 持续时间 ):存储任何在实体对话内容里的配对值.值是一个数字(int或者float).持续一段时间.(0代表永久)</DescriptionCN>
			<HowToCall>
				<Parameter>a:名字 b:配对值 c:持续时间
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetContextThink" signature="void SetContextThink(string a, handle b, float c)">
			<DescriptionEN>Set a think function on this entity.
			</DescriptionEN>
			<DescriptionCN>在这个实体上设置一个判定方法</DescriptionCN>
			<HowToCall>
				<Parameter>a:方法名? b:实体? c:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetForwardVector" signature="void SetForwardVector(Vector forwardVec)">
			<DescriptionEN>Set the orientation of the entity to have this forward forwardVec
			</DescriptionEN>
			<DescriptionCN>设置实体的方向为前进矢量</DescriptionCN>
			<HowToCall>
				<Parameter>forwardVec:前进矢量
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetFriction" signature="void SetFriction(float a)">
			<DescriptionEN>Set PLAYER friction, ignored for objects
			</DescriptionEN>
			<DescriptionCN>设置玩家阻力,无视物体</DescriptionCN>
			<HowToCall>
				<Parameter>a:阻力值?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetGravity" signature="void SetGravity(float a)">
			<DescriptionEN>Set PLAYER gravity, ignored for objects
			</DescriptionEN>
			<DescriptionCN>设置玩家引力,无视物体</DescriptionCN>
			<HowToCall>
				<Parameter>a:引力值?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetHealth" signature="void SetHealth(int hp)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>hp:生命值
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetMaxHealth" signature="void SetMaxHealth(int maxHP)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>maxHp:最大生命值
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetModel" signature="void SetModel(string modelName)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>modelName:模型名字
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetOrigin" signature="void SetOrigin(Vector origin)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>origin:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetOwner" signature="void SetOwner(handle owningEntity)">
			<DescriptionEN>Sets this entity's owner
			</DescriptionEN>
			<DescriptionCN>设定实体的所有者</DescriptionCN>
			<HowToCall>
				<Parameter>owningEntity:实体的所有者
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetParent" signature="void SetParent(handle a, string b)">
			<DescriptionEN>Set the parent for this entity.
			</DescriptionEN>
			<DescriptionCN>设定这个实体的所继承的父实体</DescriptionCN>
			<HowToCall>
				<Parameter>a:这个实体的所继承的父实体 b:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetRenderColor" signature="void SetRenderColor(int a, int b, int c)">
			<DescriptionEN>SetRenderColor( r, g, b ): Sets the render color of the entity.
			</DescriptionEN>
			<DescriptionCN>SetRenderColor( r, g, b ):设定实体的渲染颜色</DescriptionCN>
			<HowToCall>
				<Parameter>a:rgb色表的r通道,一下同理 b:g c:b
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetSize" signature="void SetSize(Vector a, Vector b)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:x轴矢量? b:y轴矢量?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetTeam" signature="void SetTeam(int team)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>team:队伍的索引
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetVelocity" signature="void SetVelocity(Vector a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:速度的矢量
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="StopSound" signature="void StopSound(string soundName)">
			<DescriptionEN>Stops a named sound playing from this entity.
			</DescriptionEN>
			<DescriptionCN>停止播放这个实体的特定的声音</DescriptionCN>
			<HowToCall>
				<Parameter>soundName:声音的名字
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="Trigger" signature="void Trigger()">
			<DescriptionEN>Fires off this entity's OnTrigger responses
			</DescriptionEN>
			<DescriptionCN>触发这个实体的触发器</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<class nameEN="CEntities" nameCN="实体"
	descriptionEN="No Description Set. Global accessor variable: Entities"
	descriptionCN="目前未有描述.全局访问变量:Entities" extends="">
	<functions>
		<function name="CreateByClassname" signature="handle CreateByClassname(string className)">
			<DescriptionEN>Creates an entity by classname
			</DescriptionEN>
			<DescriptionCN>用类名来创建一个实体</DescriptionCN>
			<HowToCall>
				<Parameter>className:类名
				</Parameter>
				<Return>handle:创建的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindAllByClassname" signature="table FindAllByClassname(string a)">
			<DescriptionEN>Finds all entities by class name. Returns an array containing all the found entities.
			</DescriptionEN>
			<DescriptionCN>通过类名来寻找所有实体.返回被找到实体的数组或表.</DescriptionCN>
			<HowToCall>
				<Parameter>a:类名
				</Parameter>
				<Return>table:被找到实体的数组或表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindAllByClassnameWithin" signature="table FindAllByClassnameWithin(string a, Vector b, float c)">
			<DescriptionEN>Find entities by class name within a radius.
			</DescriptionEN>
			<DescriptionCN>在一个半径范围内通过类名寻找实体.</DescriptionCN>
			<HowToCall>
				<Parameter>a:类名 b:中心点矢量 c:范围半径
				</Parameter>
				<Return>table:被找到实体的数组或表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindAllByModel" signature="table FindAllByModel(string modelName)">
			<DescriptionEN>Find entities by model name.
			</DescriptionEN>
			<DescriptionCN>通过模型名字来找到对象.</DescriptionCN>
			<HowToCall>
				<Parameter>modelName:模型名字
				</Parameter>
				<Return>table:被找到实体的数组或表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindAllByName" signature="table FindAllByName(string name)">
			<DescriptionEN>Find all entities by name. Returns an array containing all the found entities in it.
			</DescriptionEN>
			<DescriptionCN>通过名字来寻找所有实体.返回被找到实体的数组或表.</DescriptionCN>
			<HowToCall>
				<Parameter>name:名字
				</Parameter>
				<Return>table:被找到实体的数组或表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindAllByNameWithin" signature="table FindAllByNameWithin(string name, Vector origin, float maxRadius)">
			<DescriptionEN>Find entities by name within a radius.
			</DescriptionEN>
			<DescriptionCN>在半径范围内通过名字来寻找实体.</DescriptionCN>
			<HowToCall>
				<Parameter>name:名字 origin:中心点矢量 maxRadius:最大半径范围
				</Parameter>
				<Return>table:被找到实体的数组或表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindAllByTarget" signature="table FindAllByTarget(string targetName)">
			<DescriptionEN>Find entities by targetname.
			</DescriptionEN>
			<DescriptionCN>通过目标名字来寻找实体</DescriptionCN>
			<HowToCall>
				<Parameter>targetName:目标名字
				</Parameter>
				<Return>table:被找到实体的数组或表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindAllInSphere" signature="table FindAllInSphere(Vector origin, float maxRadius)">
			<DescriptionEN>Find entities within a radius.
			</DescriptionEN>
			<DescriptionCN>在(球形)范围内寻找实体</DescriptionCN>
			<HowToCall>
				<Parameter>origin:中心点适量 maxRadius:最大半径范围
				</Parameter>
				<Return>table:被找到实体的数组或表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindByClassname" signature="handle FindByClassname(handle startFrom, string className)">
			<DescriptionEN>Find entities by class name. Pass nil to start an iteration, or reference to a previously found entity to continue a search
			</DescriptionEN>
			<DescriptionCN>通过类名寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找</DescriptionCN>
			<HowToCall>
				<Parameter>startFrom:开始寻找的起点实体 className:类名
				</Parameter>
				<Return>handle:起点实体下一个找到的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindByClassnameNearest" signature="handle FindByClassnameNearest(string className, Vector origin, float maxRadius)">
			<DescriptionEN>Find entities by class name nearest to a point.
			</DescriptionEN>
			<DescriptionCN>在最近一个点通过类名寻找实体</DescriptionCN>
			<HowToCall>
				<Parameter>className:类名 origin:中心原点 maxRadius:范围半径
				</Parameter>
				<Return>handle:最近中心点找到的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindByClassnameWithin" signature="handle FindByClassnameWithin(handle startFrom, string className, Vector origin, float maxRadius)">
			<DescriptionEN>Find entities by class name within a radius. Pass nil to start an iteration, or reference to a previously found entity to continue a search
			</DescriptionEN>
			<DescriptionCN>在半径范围内通过类名寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找</DescriptionCN>
			<HowToCall>
				<Parameter>startFrom:作为寻找起点的实体 className:类名 origin:中心原点 maxRadius:范围半径
				</Parameter>
				<Return>handle:在范围内起点实体寻找到的下一个实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindByModel" signature="handle FindByModel(handle startFrom, string modelName)">
			<DescriptionEN>Find entities by model name. Pass nil to start an iteration, or reference to a previously found entity to continue a search
			</DescriptionEN>
			<DescriptionCN>通过模型名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找</DescriptionCN>
			<HowToCall>
				<Parameter>startFrom:作为寻找起点的实体 modelName:模型名字
				</Parameter>
				<Return>handle:通过模型名字在起点实体下一个寻找到的下一个实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindByModelWithin" signature="handle FindByModelWithin(handle startFrom, string modelName, Vector origin, float maxRadius)">
			<DescriptionEN>Find entities by model name within a radius. Pass nil to start an iteration, or reference to a previously found entity to continue a search
			</DescriptionEN>
			<DescriptionCN>在半径范围内通过模型名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找</DescriptionCN>
			<HowToCall>
				<Parameter>startFrom:作为寻找起点的实体 className:模型名 origin:中心原点 maxRadius:范围半径
				</Parameter>
				<Return>handle:在范围内起点实体寻找到的下一个实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindByName" signature="handle FindByName(handle lastEnt, string searchString)">
			<DescriptionEN>Find entities by name. Pass nil to start an iteration, or reference to a previously found entity to continue a search
			</DescriptionEN>
			<DescriptionCN>通过名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找</DescriptionCN>
			<HowToCall>
				<Parameter>lastEnt:作为寻找起点的实体 searchString:名字
				</Parameter>
				<Return>handle:在范围内起点实体寻找到的下一个实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindByNameNearest" signature="handle FindByNameNearest(string name, Vector origin, float maxRadius)">
			<DescriptionEN>Find entities by name nearest to a point.
			</DescriptionEN>
			<DescriptionCN>通过名字寻找最近原点的实体</DescriptionCN>
			<HowToCall>
				<Parameter>name:名字 origin:中心原点 maxRadius:范围半径
				</Parameter>
				<Return>handle:通过名字寻找到最近原点的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindByNameWithin" signature="handle FindByNameWithin(handle startFrom, string name, Vector origin, float maxRadius)">
			<DescriptionEN>Find entities by name within a radius. Pass nil to start an iteration, or reference to a previously found entity to continue a search
			</DescriptionEN>
			<DescriptionCN>在半径范围内通过名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找</DescriptionCN>
			<HowToCall>
				<Parameter>startFrom:作为寻找起点的实体 name:名字 origin:中心原点 maxRadius:范围半径
				</Parameter>
				<Return>handle:在范围内起点实体寻找到的下一个实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindByTarget" signature="handle FindByTarget(handle startFrom, string targetName)">
			<DescriptionEN>Find entities by targetname. Pass nil to start an iteration, or reference to a previously found entity to continue a search
			</DescriptionEN>
			<DescriptionCN>通过目标名字寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找</DescriptionCN>
			<HowToCall>
				<Parameter>startFrom:作为寻找起点的实体 targetName:目标名字
				</Parameter>
				<Return>handle:通过目标名字在起点实体寻找到的下一个实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FindInSphere" signature="handle FindInSphere(handle startFrom, Vector origin, float maxRadius)">
			<DescriptionEN>Find entities within a radius. Pass nil to start an iteration, or reference to a previously found entity to continue a search
			</DescriptionEN>
			<DescriptionCN>在半径范围内寻找实体.传入nil就从头进行迭代寻找,传入之前找到的实体可以以之作为起点开始寻找</DescriptionCN>
			<HowToCall>
				<Parameter>startFrom:作为寻找起点的实体 origin:中心原点 maxRadius:范围半径
				</Parameter>
				<Return>handle:在范围内起点实体的下一个寻找到的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="First" signature="handle First()">
			<DescriptionEN>Begin an iteration over the list of entities
			</DescriptionEN>
			<DescriptionCN>在实体数组或表中开始一个迭代程序</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:迭代的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="Next" signature="handle Next(handle startFrom)">
			<DescriptionEN>Continue an iteration over the list of entities, providing reference to a previously found entity
			</DescriptionEN>
			<DescriptionCN>从指定列表中的实体开始迭代</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:迭代的实体</Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<class nameEN="CEntityInstance" nameCN="实体实例"
	descriptionEN="No Description Set"
	descriptionCN="目前未有描述" extends="CBaseEntity">
	<functions>
		<function name="ConnectOutput" signature="void ConnectOutput(string a, string b)">
			<DescriptionEN>Adds an I/O connection that will call the named function on this entity when the specified output fires.
			</DescriptionEN>
			<DescriptionCN>添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法</DescriptionCN>
			<HowToCall>
				<Parameter>a:? b:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="Destroy" signature="void Destroy()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>摧毁实例</PS>
			</HowToCall>
		</function>
		
		<function name="DisconnectOutput" signature="void DisconnectOutput(string a, string b)">
			<DescriptionEN>Removes a connected script function from an I/O event on this entity.
			</DescriptionEN>
			<DescriptionCN>从这个实体的I/O事件移除已连接的脚本方法</DescriptionCN>
			<HowToCall>
				<Parameter>a:? b:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="DisconnectRedirectedOutput" signature="void DisconnectRedirectedOutput(string a, string b, handle c)">
			<DescriptionEN>Removes a connected script function from an I/O event on the passed entity.
			</DescriptionEN>
			<DescriptionCN>从传入实体的I/O事件移除已连接的脚本方法</DescriptionCN>
			<HowToCall>
				<Parameter>a:? b:? c:传入的实体
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="entindex" signature="int entindex()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:实例的索引</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="FireOutput" signature="void FireOutput(string outputName, handle activator, handle caller, table args, float delay)">
			<DescriptionEN>Fire an entity output
			</DescriptionEN>
			<DescriptionCN>触发实体的输出</DescriptionCN>
			<HowToCall>
				<Parameter>outputName:输出名 activator:激活的实体 caller:调用的实体 args:参数的表 delay:延迟秒数
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetClassname" signature="string GetClassname()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:类名</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetDebugName" signature="string GetDebugName()">
			<DescriptionEN>Get the entity name w/help if not defined (i.e. classname/etc)
			</DescriptionEN>
			<DescriptionCN>如果没有定义的话获得实体名字的帮助</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:测试名字的帮助</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetEntityHandle" signature="ehandle GetEntityHandle()">
			<DescriptionEN>Get the entity as an EHANDLE
			</DescriptionEN>
			<DescriptionCN>获得这个实体的EHANDLE</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>ehandle:这个实体的ehandle</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetEntityIndex" signature="int GetEntityIndex()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:实体的索引</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetIntAttr" signature="int GetIntAttr(string a)">
			<DescriptionEN>Get Integer Attribute
			</DescriptionEN>
			<DescriptionCN>获得整型属性</DescriptionCN>
			<HowToCall>
				<Parameter>a:?
				</Parameter>
				<Return>int:整型属性</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetName" signature="string GetName()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:实体名字</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetOrCreatePrivateScriptScope" signature="handle GetOrCreatePrivateScriptScope()">
			<DescriptionEN>Retrieve, creating if necessary, the private per-instance script-side data associated with an entity
			</DescriptionEN>
			<DescriptionCN>恢复实体相关的每个实例私有的脚本数据,必要时会创建</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:实体相关的每个实例私有的脚本数据</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetOrCreatePublicScriptScope" signature="handle GetOrCreatePublicScriptScope()">
			<DescriptionEN>Retrieve, creating if necessary, the public script-side data associated with an entity
			</DescriptionEN>
			<DescriptionCN>恢复实体相关的公用脚本数据,必要时会创建</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:实体相关的公用脚本数据</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetPrivateScriptScope" signature="handle GetPrivateScriptScope()">
			<DescriptionEN>Retrieve the private per-instance script-side data associated with an entity
			</DescriptionEN>
			<DescriptionCN>恢复实体相关的每个实例私有的脚本数据</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:实体相关的每个实例私有的脚本数据</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetPublicScriptScope" signature="handle GetPublicScriptScope()">
			<DescriptionEN>Retrieve the public script-side data associated with an entity
			</DescriptionEN>
			<DescriptionCN>恢复实体相关的公用脚本数据</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:实体相关的公用脚本数据</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="RedirectOutput" signature="void RedirectOutput(string a, string b, handle c)">
			<DescriptionEN>Adds an I/O connection that will call the named function on the passed entity when the specified output fires.
			</DescriptionEN>
			<DescriptionCN>添加一个I/O链接,这可以当特定输出触发时,在这个实体调用方法</DescriptionCN>
			<HowToCall>
				<Parameter>a:? b:? c:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="RemoveSelf" signature="void RemoveSelf()">
			<DescriptionEN>Delete this entity
			</DescriptionEN>
			<DescriptionCN>删除这个实体</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetIntAttr" signature="void SetIntAttr(string a, int b)">
			<DescriptionEN>Set Integer Attribute
			</DescriptionEN>
			<DescriptionCN>设置整型属性</DescriptionCN>
			<HowToCall>
				<Parameter>a:? b:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<class nameEN="CDOTABaseAbility" nameCN="DOTA基础技能"
	descriptionEN="No Description Set"
	descriptionCN="目前未有描述" extends="CBaseEntity">
	<functions>
		<function name="CastAbility" signature="void CastAbility()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>释放技能</PS>
			</HowToCall>
		</function>
		
		<function name="ContinueCasting" signature="bool ContinueCasting()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:是否持续施法</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="CreateVisibilityNode" signature="void CreateVisibilityNode(Vector a, float b, float c)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:矢量单位 b:矢量的x坐标 c:矢量的y坐标
				</Parameter>
				<Return></Return>
				<PS>创建一个可见节点</PS>
			</HowToCall>
		</function>
		
		<function name="DecrementModifierRefCount" signature="void DecrementModifierRefCount()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>减少一个修改器叠加数</PS>
			</HowToCall>
		</function>
		
		<function name="EndChannel" signature="void EndChannel(bool a)">
			<DescriptionEN>Param: bool bInterrupted
			</DescriptionEN>
			<DescriptionCN>参数: bool bInterrupted</DescriptionCN>
			<HowToCall>
				<Parameter>bInterrupted:是否可打断
				</Parameter>
				<Return></Return>
				<PS>结束(打断)技能的持续施法</PS>
			</HowToCall>
		</function>
		
		<function name="EndCooldown" signature="void EndCooldown()">
			<DescriptionEN>Clear the cooldown remaining on this ability.
			</DescriptionEN>
			<DescriptionCN>刷新这个技能</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAbilityDamage" signature="int GetAbilityDamage()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能的伤害数值</Return>
				<PS>获得技能的伤害数值</PS>
			</HowToCall>
		</function>
		
		<function name="GetAbilityDamageType" signature="int GetAbilityDamageType()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能的伤害类型</Return>
				<PS>获得技能的伤害类型</PS>
			</HowToCall>
		</function>
		
		<function name="GetAbilityIndex" signature="int GetAbilityIndex()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能的索引(第几个技能?)</Return>
				<PS>获得技能的索引</PS>
			</HowToCall>
		</function>
		
		<function name="GetAbilityName" signature="string GetAbilityName()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:技能的名字</Return>
				<PS>获得技能的名字</PS>
			</HowToCall>
		</function>
		
		<function name="GetAbilityTargetFlags" signature="int GetAbilityTargetFlags()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能的判定索引?</Return>
				<PS>获得技能的判定</PS>
			</HowToCall>
		</function>
		
		<function name="GetAbilityTargetTeam" signature="int GetAbilityTargetTeam()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能目标的队伍索引?</Return>
				<PS>获得技能目标的队伍索引</PS>
			</HowToCall>
		</function>
		
		<function name="GetAbilityTargetType" signature="int GetAbilityTargetType()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能目标的类型</Return>
				<PS>获得技能目标的类型</PS>
			</HowToCall>
		</function>
		
		<function name="GetAbilityType" signature="int GetAbilityType()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能的类型</Return>
				<PS>获得技能的类型</PS>
			</HowToCall>
		</function>
		
		<function name="GetAnimationIgnoresModelScale" signature="bool GetAnimationIgnoresModelScale()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:动画是否无视模型大小</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAssociatedPrimaryAbilities" signature="string GetAssociatedPrimaryAbilities()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:关联的主要技能名</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAssociatedSecondaryAbilities" signature="string GetAssociatedSecondaryAbilities()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:关联的次要技能名</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAutoCastState" signature="bool GetAutoCastState()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否自动施法</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBackswingTime" signature="float GetBackswingTime()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:技能的施法前摇时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBehavior" signature="int GetBehavior()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能的属性数目?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCaster" signature="handle GetCaster()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:技能的施法者</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCastPoint" signature="float GetCastPoint()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:技能的施法处?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCastRange" signature="int GetCastRange()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能的施法范围</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetChannelledManaCostPerSecond" signature="int GetChannelledManaCostPerSecond(int a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:技能的等级?
				</Parameter>
				<Return>int:技能持续施法每秒消耗的魔法值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetChannelStartTime" signature="float GetChannelStartTime()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:技能的开始施法的时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetChannelTime" signature="float GetChannelTime()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:技能的持续施法的时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCloneSource" signature="handle GetCloneSource()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:技能的克隆来源</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetConceptRecipientType" signature="int GetConceptRecipientType()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能接受者的类型</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCooldown" signature="float GetCooldown(int a)">
			<DescriptionEN>Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left.
			</DescriptionEN>
			<DescriptionCN>获得技能在给出的等级设定上的冷却时间,而不是目前的剩余的冷却时间</DescriptionCN>
			<HowToCall>
				<Parameter>a:技能的等级
				</Parameter>
				<Return>float:技能的冷却时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCooldownTime" signature="float GetCooldownTime()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:目前等级技能的冷却时间?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCooldownTimeRemaining" signature="float GetCooldownTimeRemaining()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:目前剩余的冷却时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCursorPosition" signature="Vector GetCursorPosition()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>Vector:鼠标的矢量位置</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCursorTarget" signature="handle GetCursorTarget()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:鼠标所在位置的目标</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCursorTargetingNothing" signature="bool GetCursorTargetingNothing()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:鼠标所在位置的是否存在目标</Return>
				<PS>true为没目标实体,false为存在目标实体</PS>
			</HowToCall>
		</function>
		
		<function name="GetDuration" signature="float GetDuration()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:技能的持续时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetGoldCost" signature="int GetGoldCost(int a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:技能的等级
				</Parameter>
				<Return>int:使用技能的在某个等级所消耗的金钱数值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetGoldCostForUpgrade" signature="int GetGoldCostForUpgrade(int a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:技能的(将要达到?)等级
				</Parameter>
				<Return>int:升级技能的所消耗的金钱数值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetHeroLevelRequiredToUpgrade" signature="int GetHeroLevelRequiredToUpgrade()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:升级技能的所需要的英雄等级</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetIntrinsicModifierName" signature="string GetIntrinsicModifierName()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:技能内置的修改器名字</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetLevel" signature="int GetLevel()">
			<DescriptionEN>Get the current level of the ability
			</DescriptionEN>
			<DescriptionCN>获得技能目前的等级</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能目前的等级</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetLevelSpecialValueFor" signature="table GetLevelSpecialValueFor(string a, int b)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:目标名字? b:技能等级
				</Parameter>
				<Return>table:技能特殊值的表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetManaCost" signature="int GetManaCost(int a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:技能的等级
				</Parameter>
				<Return>int:技能在某个等级的魔法消耗</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetMaxLevel" signature="int GetMaxLevel()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能的可升的最高等级</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetModifierValue" signature="float GetModifierValue()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:获得技能的修改器的值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetModifierValueBonus" signature="float GetModifierValueBonus()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:获得技能的修改器额外增加的值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetPlaybackRateOverride" signature="float GetPlaybackRateOverride()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:重写的技能动画播放速率</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetSharedCooldownName" signature="string GetSharedCooldownName()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:共用冷却时间的技能名字</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetSpecialValueFor" signature="table GetSpecialValueFor(string a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:目标的名字?
				</Parameter>
				<Return>table:技能特殊值的表</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetStolenActivityModifier" signature="string GetStolenActivityModifier()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>string:偷取的修改器名字?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetToggleState" signature="bool GetToggleState()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能目前的开关状态</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="HeroXPChange" signature="bool HeroXPChange(float a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:时间点?
				</Parameter>
				<Return>bool:英雄的经验是否改变</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IncrementModifierRefCount" signature="void IncrementModifierRefCount()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>增加技能修改器的叠加数</PS>
			</HowToCall>
		</function>
		
		<function name="IsActivated" signature="bool IsActivated()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否激活状态</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsAttributeBonus" signature="bool IsAttributeBonus()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否增加属性</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsChanneling" signature="bool IsChanneling()">
			<DescriptionEN>Returns whether the ability is currently channeling.
			</DescriptionEN>
			<DescriptionCN>返回目前技能是否在施法状态</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:目前技能是否在施法状态</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsCooldownReady" signature="bool IsCooldownReady()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否就绪</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsCosmetic" signature="bool IsCosmetic()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:是否被饰品改变特效?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsFullyCastable" signature="bool IsFullyCastable()">
			<DescriptionEN>Returns whether the ability can be cast.
			</DescriptionEN>
			<DescriptionCN>返回技能能否被释放</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能能否被释放</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsHidden" signature="bool IsHidden()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能(图标)是否隐藏</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsHiddenWhenStolen" signature="bool IsHiddenWhenStolen()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能被偷取的时候是否隐藏</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsInAbilityPhase" signature="bool IsInAbilityPhase()">
			<DescriptionEN>Returns whether the ability is currently casting.
			</DescriptionEN>
			<DescriptionCN>返回技能目前是否在被释放</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能目前是否在被释放</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsItem" signature="bool IsItem()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否来自物品?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsOwnersGoldEnough" signature="bool IsOwnersGoldEnough(int a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:技能的等级?
				</Parameter>
				<Return>bool:技能的所有者的金钱是否足够用于技能的消费金钱</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsOwnersGoldEnoughForUpgrade" signature="bool IsOwnersGoldEnoughForUpgrade()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能所有者金钱是否足够用于技能升级</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsOwnersManaEnough" signature="bool IsOwnersManaEnough()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能所有者魔法值是否足够施法技能</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsPassive" signature="bool IsPassive()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否为被动技能</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsSharedWithTeammates" signature="bool IsSharedWithTeammates()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否与队友共享</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsStealable" signature="bool IsStealable()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否可被偷取</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsStolen" signature="bool IsStolen()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否已经被偷取</Return>
				<PS>与技能可否被偷取无关,只判断技能目前有没有被偷取</PS>
			</HowToCall>
		</function>
		
		<function name="IsToggle" signature="bool IsToggle()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否可开关</Return>
				<PS>如美杜莎的魔法盾,返回就是true</PS>
			</HowToCall>
		</function>
		
		<function name="IsTrained" signature="bool IsTrained()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否熟练?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="MarkAbilityButtonDirty" signature="void MarkAbilityButtonDirty()">
			<DescriptionEN>Mark the ability button for this ability as needing a refresh
			</DescriptionEN>
			<DescriptionCN>标记这个技能图标表示需要刷新</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="NumModifiersUsingAbility" signature="int NumModifiersUsingAbility()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:技能所用到修改器的数量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="OnAbilityPhaseInterrupted" signature="void OnAbilityPhaseInterrupted()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="OnAbilityPhaseStart" signature="bool OnAbilityPhaseStart()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否开始释放</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="OnAbilityPinged" signature="void OnAbilityPinged()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="OnChannelFinish" signature="void OnChannelFinish(bool a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>bool:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="OnChannelThink" signature="void OnChannelThink(float a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>float:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="OnHeroCalculateStatBonus" signature="void OnHeroCalculateStatBonus()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="OnHeroLevelUp" signature="void OnHeroLevelUp()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当英雄升级的时候</PS>
			</HowToCall>
		</function>
		
		<function name="OnInventoryContentsChanged" signature="void OnInventoryContentsChanged()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当库存改变时</PS>
			</HowToCall>
		</function>
		
		<function name="OnOwnerDied" signature="void OnOwnerDied()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当技能所有者死亡时</PS>
			</HowToCall>
		</function>
		
		<function name="OnOwnerSpawned" signature="void OnOwnerSpawned()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当技能所有者出生时</PS>
			</HowToCall>
		</function>
		
		<function name="OnSpellStart" signature="void OnSpellStart()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当技能开始释放时</PS>
			</HowToCall>
		</function>
		
		<function name="OnToggle" signature="void OnToggle()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当技能切换开关状态时</PS>
			</HowToCall>
		</function>
		
		<function name="OnUpgrade" signature="void OnUpgrade()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当技能升级时</PS>
			</HowToCall>
		</function>
		
		<function name="PayGoldCost" signature="void PayGoldCost()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当支付技能消耗的金钱时</PS>
			</HowToCall>
		</function>
		
		<function name="PayGoldCostForUpgrade" signature="void PayGoldCostForUpgrade()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当支付升级技能消耗的金钱时</PS>
			</HowToCall>
		</function>
		
		<function name="PayManaCost" signature="void PayManaCost()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>当支付技能所需魔法时</PS>
			</HowToCall>
		</function>
		
		<function name="PlaysDefaultAnimWhenStolen" signature="bool PlaysDefaultAnimWhenStolen()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能被偷取是否播放默认动画</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ProcsMagicStick" signature="bool ProcsMagicStick()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否能为对方魔棒充能</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="RefCountsModifiers" signature="bool RefCountsModifiers()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:技能是否能叠加修改器</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="RefundManaCost" signature="void RefundManaCost()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS>返还技能消耗的魔法值</PS>
			</HowToCall>
		</function>
		
		<function name="ResetToggleOnRespawn" signature="bool ResetToggleOnRespawn()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:英雄重生时是否重置技能开关</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetAbilityIndex" signature="void SetAbilityIndex(int a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:想要设置的技能索引
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetActivated" signature="void SetActivated(bool a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:设置技能是否激活?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetChanneling" signature="void SetChanneling(bool a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:设置技能是否持续施法
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetHidden" signature="void SetHidden(bool a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:设置技能是否隐藏(图标)
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetInAbilityPhase" signature="void SetInAbilityPhase(bool a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetLevel" signature="void SetLevel(int a)">
			<DescriptionEN>Sets the level of this ability.
			</DescriptionEN>
			<DescriptionCN>设置这个技能的等级</DescriptionCN>
			<HowToCall>
				<Parameter>a:设置技能的等级
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetOverrideCastPoint" signature="void SetOverrideCastPoint(float a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>float:设置技能重写的释放点?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetRefCountsModifiers" signature="void SetRefCountsModifiers(bool a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>bool:设置技能是否可以叠加修改器
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetStolen" signature="void SetStolen(bool a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>bool:设置技能是否可以被偷取?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ShouldUseResources" signature="bool ShouldUseResources()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:是否要使用资源</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SpeakAbilityConcept" signature="void SpeakAbilityConcept(int a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:技能的等级?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SpeakTrigger" signature="bool SpeakTrigger()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:是否存在说话的触发器?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="StartCooldown" signature="void StartCooldown(float a)">
			<DescriptionEN>param: flCooldown
			</DescriptionEN>
			<DescriptionCN>参数:fl冷却时间?</DescriptionCN>
			<HowToCall>
				<Parameter>a:fl冷却时间?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ToggleAbility" signature="void ToggleAbility()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ToggleAutoCast" signature="void ToggleAutoCast()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="UpgradeAbility" signature="void UpgradeAbility()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="UseResources" signature="void UseResources(bool a, bool b, bool c)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:? b:? c:?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
	</functions>
	
</class>

<class nameEN="CDOTA_Ability_Animation_Attack" nameCN="DOTA技能的攻击动画"
	descriptionEN="No Description Set"
	descriptionCN="目前未有描述" extends="CDOTABaseAbility">
	<functions>
		<function name="SetPlaybackRate" signature="void SetPlaybackRate(float a)">
			<DescriptionEN>Override playbackrate
			</DescriptionEN>
			<DescriptionCN>重写播放速率</DescriptionCN>
			<HowToCall>
				<Parameter>a:重写的播放速率
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<class nameEN="CDOTA_Ability_Animation_TailSpin" nameCN="DOTA技能的后摇动画?"
	descriptionEN="No Description Set"
	descriptionCN="目前未有描述" extends="CDOTABaseAbility">
	<functions>
		<function name="SetPlaybackRate" signature="void SetPlaybackRate(float a)">
			<DescriptionEN>Override playbackrate
			</DescriptionEN>
			<DescriptionCN>重写播放速率</DescriptionCN>
			<HowToCall>
				<Parameter>a:重写的播放速率
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<class nameEN="CDOTA_Ability_Nian_Leap" nameCN="DOTA技能之年兽跳跃"
	descriptionEN="No Description Set"
	descriptionCN="目前未有描述" extends="CDOTABaseAbility">
	<functions>
		<function name="SetPlaybackRate" signature="void SetPlaybackRate(float a)">
			<DescriptionEN>Override playbackrate
			</DescriptionEN>
			<DescriptionCN>重写播放速率</DescriptionCN>
			<HowToCall>
				<Parameter>a:重写的播放速率
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<class nameEN="CDOTA_Ability_Nian_Dive" nameCN="DOTA技能之年兽下潜"
	descriptionEN="No Description Set"
	descriptionCN="目前未有描述" extends="CDOTABaseAbility">
	<functions>
		<function name="SetPlaybackRate" signature="void SetPlaybackRate(float a)">
			<DescriptionEN>Override playbackrate
			</DescriptionEN>
			<DescriptionCN>重写播放速率</DescriptionCN>
			<HowToCall>
				<Parameter>a:重写的播放速率
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<class nameEN="CDOTA_Ability_Nian_Roar" nameCN="DOTA技能之年兽咆哮"
	descriptionEN="No Description Set"
	descriptionCN="目前未有描述" extends="CDOTABaseAbility">
	<functions>
		<function name="GetCastCount" signature="int GetCastCount()">
			<DescriptionEN>Number of times Nian has used the roar
			</DescriptionEN>
			<DescriptionCN>年兽使用了咆哮的次数</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:年兽使用了咆哮的次数</Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<class nameEN="CDOTA_Item" nameCN="DOTA物品"
	descriptionEN="No Description Set"
	descriptionCN="目前未有描述" extends="CDOTABaseAbility">
	<functions>
		<function name="GetContainer" signature="handle GetContainer()">
			<DescriptionEN>Get the container for this item.
			</DescriptionEN>
			<DescriptionCN>获得物品所有者</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:物品所有者</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCost" signature="int GetCost()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:购买物品所需金钱</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCurrentCharges" signature="int GetCurrentCharges()">
			<DescriptionEN>Get the number of charges this item currently has.
			</DescriptionEN>
			<DescriptionCN>获得物品的目前充能</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:物品的目前充能</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetInitialCharges" signature="int GetInitialCharges()">
			<DescriptionEN>Get the number of charges this item currently has.
			</DescriptionEN>
			<DescriptionCN>获得物品的初始充能</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:物品的初始充能</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetPurchaser" signature="handle GetPurchaser()">
			<DescriptionEN>Get the purchaser for this item.
			</DescriptionEN>
			<DescriptionCN>获得物品的购买者</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:物品的购买者</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetPurchaseTime" signature="float GetPurchaseTime()">
			<DescriptionEN>Get the purchase time of this item
			</DescriptionEN>
			<DescriptionCN>获得物品的购买时间</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:物品的购买时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetShareability" signature="int GetShareability()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int:物品的共享等级</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsPermanent" signature="bool IsPermanent()">
			<DescriptionEN>Is this a permanent item?
			</DescriptionEN>
			<DescriptionCN>判断物品是否非消耗品</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:物品是否非消耗品</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="LaunchLoot" signature="void LaunchLoot(bool a, float b, float c, Vector d)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:能否发射战利品? b:发射起点的x轴坐标? c:发射起点的y轴坐标? d:发射的矢量
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetCurrentCharges" signature="void SetCurrentCharges(int a)">
			<DescriptionEN>Set the number of charges on this item
			</DescriptionEN>
			<DescriptionCN>设置物品的充能数</DescriptionCN>
			<HowToCall>
				<Parameter>a:设置的物品充能数
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetPurchaser" signature="void SetPurchaser(handle a)">
			<DescriptionEN>Set the purchaser of record for this item.
			</DescriptionEN>
			<DescriptionCN>设置物品的购买者</DescriptionCN>
			<HowToCall>
				<Parameter>a:设置的物品购买者
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetPurchaseTime" signature="void SetPurchaseTime(float a)">
			<DescriptionEN>Set the purchase time of this item
			</DescriptionEN>
			<DescriptionCN>设置物品的购买时间</DescriptionCN>
			<HowToCall>
				<Parameter>a:设置的物品购买时间
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetStacksWithOtherOwners" signature="void SetStacksWithOtherOwners(bool a)">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>a:设置能否在别的玩家物品栏中叠加同一物品
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="StacksWithOtherOwners" signature="bool StacksWithOtherOwners()">
			<DescriptionEN>No Description Set
			</DescriptionEN>
			<DescriptionCN>目前未有描述</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>bool:能否在别的玩家物品栏中叠加同一物品</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="Think" signature="void Think()">
			<DescriptionEN>Think this item
			</DescriptionEN>
			<DescriptionCN>判断此物品</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<class nameEN="CDOTA_Item_Physical" nameCN="DOTA物品的物理作用"
	descriptionEN="No Description Set"
	descriptionCN="目前未有描述" extends="CBaseAnimating">
	<functions>
		<function name="GetContainedItem" signature="handle GetContainedItem()">
			<DescriptionEN>Returned the contained item.
			</DescriptionEN>
			<DescriptionCN>返回禁用的物品?</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>handle:禁用的物品?</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCreationTime" signature="float GetCreationTime()">
			<DescriptionEN>Returns the game time when this item was created in the world
			</DescriptionEN>
			<DescriptionCN>返回物品第一次出现在地图上的时间</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>float:物品第一次出现在地图上的时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetContainedItem" signature="void SetContainedItem(handle a)">
			<DescriptionEN>Set the contained item.
			</DescriptionEN>
			<DescriptionCN>设置禁用的物品?</DescriptionCN>
			<HowToCall>
				<Parameter>a:设置的禁用物品?
				</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	
	</functions>

</class>

<!--以下部分由Hao翻译 -->


<!--以下部分由cftx翻译 -->

<class nameEN="CDOTA_BaseNPC_Hero" nameCN="DOTA基础NPC 英雄"
	descriptionEN=""
	descriptionCN="" extends="CDOTA_BaseNPC">
	<functions>
		<function name="AddExperience" signature="bool AddExperience(float amount, bool applyBotDifficultyScaling)">
			<DescriptionEN>Adds experience to this unit.
			</DescriptionEN>
			<DescriptionCN>给单位增加经验值</DescriptionCN>
			<HowToCall>
				<Parameter>amount：经验值，applyBotDifficultyScaling：应用机器人难度修正
				</Parameter>
				<Return>bool</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="Buyback" signature="void Buyback()">
			<DescriptionEN>Spend the gold and buyback with this hero.
			</DescriptionEN>
			<DescriptionCN>花费金钱并买活英雄</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="CalculateStatBonus" signature="void CalculateStatBonus()">
			<DescriptionEN>Recalculate all stats after the hero gains stats.
			</DescriptionEN>
			<DescriptionCN>英雄返回属性后，重新计算全部属性
			</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="CanEarnGold"
			signature="bool CanEarnGold()">
			<DescriptionEN>Returns boolean value result of buyback gold limit time less than game time.
			</DescriptionEN>
			<DescriptionCN>返回布尔值，买活返回金钱限制时间是否少于游戏时间（其实就是是否能够正常返回金钱.....）</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>bool:能否返回金钱</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ClearLastHitMultikill" signature="void ClearLastHitMultikill()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ClearLastHitStreak" signature="void ClearLastHitStreak()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ClearStreak" signature="void ClearStreak()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAbilityPoints" signature="int GetAbilityPoints()">
			<DescriptionEN>Gets the current unspent ability point's.</DescriptionEN>
			<DescriptionCN>返回未分配的技能点数</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int: 技能点数</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAgility" signature="float GetAgility()">
		    <DescriptionEN></DescriptionEN>
			<DescriptionCN>返回敏捷值</DescriptionCN>
		    <HowToCall>
				<Parameter></Parameter>
				<Return>float: 敏捷值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAgilityGain" signature="float GetAgilityGain()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回敏捷成长</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：敏捷成长</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAssists" signature="int GetAssists()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>返回助攻数，数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter>
				</Parameter>
				<Return>int：助攻数</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetAttacker" signature="int GetAttacker(int a)">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter>a</Parameter>
				<Return>int</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBaseAgility" signature="float GetBaseAgility()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回基础敏捷</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：基础敏捷</Return>
				<PS></PS>
			</HowToCall>
		</function>	
		
		<function name="GetBaseDamageMax" signature="int GetBaseDamageMax()">
			<DescriptionEN>Hero damage is also affected by attributes.</DescriptionEN>
			<DescriptionCN>返回基础攻击伤害最大值，英雄的基础攻击伤害也会受到属性影响</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：伤害最大值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBaseDamageMin" signature="int GetBaseDamageMin()">
			<DescriptionEN>Hero damage is also affected by attributes.</DescriptionEN>
			<DescriptionCN>返回基础攻击伤害最小值，英雄的基础攻击伤害也会受到属性影响</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：伤害最小值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBaseIntellect" signature="float GetBaseIntellect()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回基础智力</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：基础智力</Return>
				<PS></PS>
			</HowToCall>
		</function>	
		
		<function name="GetBaseStrength" signature="float GetBaseStrength()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回基础力量</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：基础力量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBonusDamageFromPrimaryStat" signature="int GetBonusDamageFromPrimaryStat()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回来自主属性奖励的攻击伤害值</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：奖励值</Return>
				<PS></PS>
			</HowToCall>
		</function>	
		
		<function name="GetBuybackCooldownTime()" signature="float GetBuybackCooldownTime()">
			<DescriptionEN>Return float value for the amount of time left on cooldown for this hero's buyback.</DescriptionEN>
			<DescriptionCN>返回该英雄买活CD的剩余时间</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：剩余时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetBuybackCost()" signature="int GetBuybackCost()">
			<DescriptionEN>Return integer value for the gold cost of a buyback.</DescriptionEN>
			<DescriptionCN>返回买活所需金钱</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：金钱数</Return>
				<PS></PS>
			</HowToCall>
		</function>	
		
		<function name="GetBuybackGoldLimitTime" signature="float GetBuybackGoldLimitTime()">
			<DescriptionEN>Returns the amount of time gold gain is limited after buying back.</DescriptionEN>
			<DescriptionCN>返回买活所带来的金钱惩罚剩余时间</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：剩余时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetCurrentXP" signature="int GetCurrentXP()">
			<DescriptionEN>Returns the amount of XP</DescriptionEN>
			<DescriptionCN>返回当前经验值</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：经验值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetDeathGoldCost" signature="int GetDeathGoldCost()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回死亡损失金钱</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：损失金钱量</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetDeaths" signature="int GetDeaths()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回死亡次数</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：死亡次数</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetDenies" signature="int GetDenies()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回反补次数</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：反补数</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetGold" signature="int GetGold()">
			<DescriptionEN>Returns gold amount for the player owning this hero</DescriptionEN>
			<DescriptionCN>返回该英雄拥有者所有的金钱数量</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetGoldBounty" signature="int GetGoldBounty()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetHealthRegen" signature="float GetHealthRegen()">
			<DescriptionEN>Hero health regen is affected by attributes.</DescriptionEN>
			<DescriptionCN>返回每秒生命回复，英雄生命回复受到属性影响</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：每秒生命回复</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetIncreasedAttackSpeed" signature="float GetIncreasedAttackSpeed()">
			<DescriptionEN>Hero attack speed is also affected by agility.</DescriptionEN>
			<DescriptionCN>返回攻击速度增加值（IAS），英雄攻击速度受到敏捷影响</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：IAS值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetIntellect" signature="float GetIntellect()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回智力值</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：智力值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetIntellectGain" signature="float GetIntellectGain()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回智力成长</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：智力成长</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetKills" signature="int GetKills()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>返回击杀数，数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：击杀数</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetLastHits" signature="int GetLastHits()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>返回正补数，数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：正补数</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetManaRegen" signature="float GetManaRegen()">
			<DescriptionEN>Hero mana regen is affected by attributes.</DescriptionEN>
			<DescriptionCN>返回每秒魔法回复，英雄魔法回复受到属性影响</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：每秒魔法回复</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetMostRecentDamageTime" signature="float GetMostRecentDamageTime()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回最近一次伤害时间</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetMultipleKillCount" signature="int GetMultipleKillCount()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回多杀计数</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetNumAttackers" signature="int GetNumAttackers()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetPhysicalArmorValue" signature="float GetPhysicalArmorValue()">
			<DescriptionEN>Hero armor is affected by attributes.</DescriptionEN>
			<DescriptionCN>返回护甲值，英雄护甲受到属性影响</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：护甲值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetPlayerID" signature="int GetPlayerID()">
			<DescriptionEN>Returns player ID of the player owning this hero</DescriptionEN>
			<DescriptionCN>返回英雄拥有者的ID</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：玩家ID</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetPrimaryAttribute" signature="int GetPrimaryAttribute()">
			<DescriptionEN>0 = strength, 1 = agility, 2 = intelligence.</DescriptionEN>
			<DescriptionCN>返回英雄主要属性，0 = 力量, 1 = 敏捷, 2 = 智力.</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int：0 = 力量, 1 = 敏捷, 2 = 智力</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetPrimaryStatValue" signature="float GetPrimaryStatValue()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回主属性值</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：主属性值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetRespawnTime" signature="float GetRespawnTime()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回复活时间</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：复活时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetStatsBasedManaRegen" signature="float GetStatsBasedManaRegen()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回属性提供的魔法回复</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="int GetStreak()" signature="int GetStreak()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回连杀数</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetStrength" signature="float GetStrength()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回力量值</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：力量值</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetStrengthGain" signature="float GetStrengthGain()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回力量成长</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：力量成长</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetTimeUntilRespawn" signature="float GetTimeUntilRespawn()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回复活所需的时间</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float：剩余时间</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="HasAnyAvailableInventorySpace" signature="bool HasAnyAvailableInventorySpace()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回是否有可用物品栏空间</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>bool</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="HasFlyingVision" signature="bool HasFlyingVision()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>返回是否拥有空中视野</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>bool</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="HasOwnerAbandoned" signature="bool HasOwnerAbandoned()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="HasRoomForItem" signature="int HasRoomForItem(string a, bool b, bool c)">
			<DescriptionEN>Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling</DescriptionEN>
			<DescriptionCN>参数: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling</DescriptionCN>
			<HowToCall>
				<Parameter>a：道具名，b：包括配方，c：允许出售</Parameter>
				<Return>bool</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="HeroLevelUp" signature="void HeroLevelUp(bool a)">
			<DescriptionEN>Levels up the hero, true or false to play effects.</DescriptionEN>
			<DescriptionCN>升级英雄, 参数决定是否播放升级效果.</DescriptionCN>
			<HowToCall>
				<Parameter>a：是否播放升级效果</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IncrementAssists" signature="void IncrementAssists()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IncrementDeaths" signature="void IncrementDeaths()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IncrementDenies" signature="void IncrementDenies()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IncrementKills" signature="void IncrementKills(int kills)">
			<DescriptionEN>Passed ID is for the victim, killer ID is ID of the current hero. Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>增加击杀数，击杀者为当前英雄，传入ID为受害者ID。数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter>kills：受害者ID</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="void IncrementLastHitMultikill()" signature="void IncrementLastHitMultikill()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IncrementLastHits()" signature="void IncrementLastHits()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IncrementLastHitStreak" signature="void IncrementLastHitStreak()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IncrementNearbyCreepDeaths()" signature="void IncrementNearbyCreepDeaths()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IncrementStreak" signature="void IncrementStreak()">
			<DescriptionEN>Value is stored in PlayerResource.</DescriptionEN>
			<DescriptionCN>数值存储在玩家资源(PlayerResource)中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsBuybackDisabledByReapersScythe" signature="bool IsBuybackDisabledByReapersScythe()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>是否被死神镰刀禁止买活</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>bool</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsReincarnating" signature="bool IsReincarnating()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>是否处于重生中</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>bool</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="KilledHero" signature="void KilledHero(handle a, handle b)">
			<DescriptionEN>Args: Hero, Inflictor</DescriptionEN>
			<DescriptionCN>参数: 英雄, 加害者</DescriptionCN>
			<HowToCall>
				<Parameter>a：英雄句柄，b:加害者句柄</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ModifyAgility" signature="void ModifyAgility(float a)">
			<DescriptionEN>Adds passed value to base attribute value, then calls CalculateStatBonus.</DescriptionEN>
			<DescriptionCN>增加指定值到英雄基础敏捷，随后调用CalculateStatBonus</DescriptionCN>
			<HowToCall>
				<Parameter>a：数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ModifyGold" signature="int ModifyGold(int goldAmmt, bool reliable, int reason)">
			<DescriptionEN>Gives this hero some gold. Args: int nGoldChange, bool bReliable, int reason</DescriptionEN>
			<DescriptionCN>给予英雄金钱。参数: int 金钱数, bool 是否为可靠金钱, int 原因</DescriptionCN>
			<HowToCall>
				<Parameter>goldAmmt：金钱数，reliable：是否为可靠金钱，reason：原因</Parameter>
				<Return>int</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ModifyIntellect" signature="void ModifyIntellect(float a)">
			<DescriptionEN>Adds passed value to base attribute value, then calls CalculateStatBonus.</DescriptionEN>
			<DescriptionCN>增加指定值到英雄基础智力，随后调用CalculateStatBonus</DescriptionCN>
			<HowToCall>
				<Parameter>a：数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ModifyStrength" signature="void ModifyStrength(float a)">
			<DescriptionEN>Adds passed value to base attribute value, then calls CalculateStatBonus.</DescriptionEN>
			<DescriptionCN>增加指定值到英雄基础力量，随后调用CalculateStatBonus</DescriptionCN>
			<HowToCall>
				<Parameter>a：数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="PerformTaunt" signature="void PerformTaunt()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="RecordLastHit" signature="void RecordLastHit()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="RespawnHero" signature="void RespawnHero(bool buyback, bool unknown1, bool unknown2)">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetAbilityPoints" signature="void SetAbilityPoints(int a)">
			<DescriptionEN>Sets the current unspent ability point's.</DescriptionEN>
			<DescriptionCN>设置当前可用技能点</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetBaseAgility" signature="void SetBaseAgility(float a)">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>设置基础敏捷</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetBaseIntellect" signature="void SetBaseIntellect(float a)">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>设置基础智力</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetBaseStrength" signature="void SetBaseStrength(float a)">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>设置基础力量</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetBuybackCooldownTime" signature="void SetBuybackCooldownTime(float a)">
			<DescriptionEN>Sets the buyback cooldown time.</DescriptionEN>
			<DescriptionCN>设置买活冷却时间</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetBuyBackDisabledByReapersScythe" signature="void SetBuyBackDisabledByReapersScythe(bool a)">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN>设置是否被死神镰刀禁止买活</DescriptionCN>
			<HowToCall>
				<Parameter>a：布尔值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetBuybackGoldLimitTime" signature="void SetBuybackGoldLimitTime(float a)">
			<DescriptionEN>Set the amount of time gold gain is limited after buying back.</DescriptionEN>
			<DescriptionCN>设置买活后金钱惩罚时间</DescriptionCN>
			<HowToCall>
				<Parameter>a</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetCustomDeathXP" signature="void SetCustomDeathXP(int a)">
			<DescriptionEN>Sets a custom experience value for this hero.
 Tip:	GameRules boolean must be set for this to work!</DescriptionEN>
			<DescriptionCN>设置该英雄死亡提供的经验值
 Tip:	需要设置GameRules!</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetGold" signature="void SetGold(int amount, bool reliableGold)">
			<DescriptionEN>Sets the gold amount for the player owning this hero</DescriptionEN>
			<DescriptionCN>设置英雄拥有者的金钱</DescriptionCN>
			<HowToCall>
				<Parameter>amount：整数数值，reliableGold：是否可靠金钱</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetPlayerID" signature="void SetPlayerID(int a)">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS>设置玩家ID</PS>
			</HowToCall>
		</function>
		
		<function name="SetRespawnPosition" signature="void SetRespawnPosition(Vector a)">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter>a：Vector</Parameter>
				<Return></Return>
				<PS>设置复活位置</PS>
			</HowToCall>
		</function>
		
		<function name="SetTimeUntilRespawn" signature="void SetTimeUntilRespawn(float a)">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter>a：浮点数值</Parameter>
				<Return></Return>
				<PS>设置复活还需要的时间</PS>
			</HowToCall>
		</function>
		
		<function name="ShouldDoFlyHeightVisual" signature="bool ShouldDoFlyHeightVisual()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SpendGold" signature="void SpendGold(int amount, int reason)">
			<DescriptionEN>Args: int nGold, int nReason</DescriptionEN>
			<DescriptionCN>参数: int 金钱, int 原因</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="UnitCanRespawn" signature="bool UnitCanRespawn()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="UpgradeAbility" signature="void UpgradeAbility(handle a)">
			<DescriptionEN>This upgrades the passed ability if it exists and the hero has enough ability point's.</DescriptionEN>
			<DescriptionCN>升级指定技能，需要英雄拥有该技能和技能点</DescriptionCN>
			<HowToCall>
				<Parameter>a：技能句柄</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="WillReincarnate" signature="bool WillReincarnate()">
			<DescriptionEN></DescriptionEN>
			<DescriptionCN></DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>bool：是否将重生</Return>
				<PS></PS>
			</HowToCall>
		</function>	
	</functions>
</class>

<class nameEN="CDOTA_BaseNPC_Creature" nameCN="DOTA基础NPC 生物"
	descriptionEN=""
	descriptionCN="" extends="CDOTA_BaseNPC">
	<functions>
		<function name="AddItemDrop" signature="void AddItemDrop(handle a)">
			<DescriptionEN>Add the specified item drop to this creature</DescriptionEN>
			<DescriptionCN>为该生物添加特别的道具掉落</DescriptionCN>
			<HowToCall>
				<Parameter>a：道具句柄</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="CreatureLevelUp" signature="void CreatureLevelUp(int a)">
			<DescriptionEN>Level the creature up by the specified number of levels</DescriptionEN>
			<DescriptionCN>升级目标生物指定级别</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsChampion" signature="bool IsChampion()">
			<DescriptionEN>Is this unit a champion?</DescriptionEN>
			<DescriptionCN>是否为冠军生物</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>bool</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetArmorGain" signature="void SetArmorGain(float a)">
			<DescriptionEN>Set the armor gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的护甲</DescriptionCN>
			<HowToCall>
				<Parameter>a：浮点数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetAttackTimeGain" signature="void SetAttackTimeGain(float a)">
			<DescriptionEN>Set the attack time gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的攻击速度</DescriptionCN>
			<HowToCall>
				<Parameter>a：浮点数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetBountyGain" signature="void SetBountyGain(int a)">
			<DescriptionEN>Set the bounty gold gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的奖励金币</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetChampion" signature="void SetChampion(bool a)">
			<DescriptionEN>Flag this unit as a champion creature.</DescriptionEN>
			<DescriptionCN>将该生物标记为冠军生物</DescriptionCN>
			<HowToCall>
				<Parameter>a：布尔值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetDamageGain" signature="void SetDamageGain(int a)">
			<DescriptionEN>Set the damage gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的攻击伤害</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetDisableResistanceGain(" signature="void SetDisableResistanceGain(float a)">
			<DescriptionEN>Set the disable resistance gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的控制抗性</DescriptionCN>
			<HowToCall>
				<Parameter>a：浮点数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetHPGain" signature="void SetHPGain(int a)">
			<DescriptionEN>Set the hit point's gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的生命值</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetHPRegenGain" signature="void SetHPRegenGain(float a)">
			<DescriptionEN>Set the hit point's regen gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的生命回复</DescriptionCN>
			<HowToCall>
				<Parameter>a：浮点数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetMagicResistanceGain" signature="void SetMagicResistanceGain(float a)">
			<DescriptionEN>Set the magic resistance gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的魔法抗性</DescriptionCN>
			<HowToCall>
				<Parameter>a：浮点数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetManaGain" signature="void SetManaGain(float a)">
			<DescriptionEN>Set the mana point's gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的魔法值</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetManaRegenGain" signature="void SetManaRegenGain(float a)">
			<DescriptionEN>Set the mana point's gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的魔法回复</DescriptionCN>
			<HowToCall>
				<Parameter>a：浮点数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetMoveSpeedGain" signature="void SetMoveSpeedGain(int a)">
			<DescriptionEN>Set the move speed gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的移动速度</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetXPGain" signature="void SetXPGain(int a)">
			<DescriptionEN>Set the xp reward gained per level on this creature.</DescriptionEN>
			<DescriptionCN>设置该生物每级增加的经验值</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CDOTA_BaseNPC_Building" nameCN="DOTA基础NPC 建筑"
	descriptionEN=""
	descriptionCN="" extends="CDOTA_BaseNPC">
	<functions>
		<function name="GetInvulnCount" signature="int GetInvulnCount()">
			<DescriptionEN>Get the invulnerability count for a building.</DescriptionEN>
			<DescriptionCN>返回建筑无敌计数</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>int</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetInvulnCount" signature="void SetInvulnCount(int a)">
			<DescriptionEN>Set the invulnerability counter of this building.</DescriptionEN>
			<DescriptionCN>设置建筑无敌计数</DescriptionCN>
			<HowToCall>
				<Parameter>a：整数数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CDOTA_BaseNPC_Building" nameCN="RPG单位"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="ActionState" signature="handle ActionState()">
			<DescriptionEN>return the ActionState object for this unit.</DescriptionEN>
			<DescriptionCN>返回该单位的ActionState物体</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>handle</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="ClearMovementTarget" signature="void ClearMovementTarget()">
			<DescriptionEN>Clear any movement target entity/position.</DescriptionEN>
			<DescriptionCN>清除移动目标实体或点</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS>相关动作SetMovementTargetEntity/SetMovementTargetPosition</PS>
			</HowToCall>
		</function>
		
		<function name="FindSensedEnemies()" signature="table FindSensedEnemies()">
			<DescriptionEN>returns list of all enemy units within this unit's sight cone or sensing sphere</DescriptionEN>
			<DescriptionCN>返回该单位视野锥或感应球体内所有敌方单位列表</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>table</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetMaxSpeed" signature="float GetMaxSpeed()">
			<DescriptionEN>returns unit's max speed</DescriptionEN>
			<DescriptionCN>返回最大移动速度</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetMaxStamina" signature="float GetMaxStamina()">
			<DescriptionEN>returns maximum stamina amount.</DescriptionEN>
			<DescriptionCN>返回最大耐力值</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetMovementTargetEntity" signature="handle GetMovementTargetEntity()">
			<DescriptionEN>Returns the movement target entity, if set.</DescriptionEN>
			<DescriptionCN>返回移动目标实体，如果已经设置移动目标实体</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>handle</Return>
				<PS>相关动作SetMovementTargetEntity</PS>
			</HowToCall>
		</function>
		
		<function name="GetSensingSphereRange" signature="float GetSensingSphereRange()">
			<DescriptionEN>returns range of unit's 360 degree sensing sphere</DescriptionEN>
			<DescriptionCN>返回单位的360度感应球体范围</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetSightConeAngle" signature="float GetSightConeAngle()">
			<DescriptionEN>returns angle in which the unit can see things up to sight range</DescriptionEN>
			<DescriptionCN>返回单位视野锥的夹角</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetSightConeRange" signature="float GetSightConeRange()">
			<DescriptionEN>returns range of unit's sight cone</DescriptionEN>
			<DescriptionCN>返回单位视野锥的范围</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetStamina" signature="float GetStamina()">
			<DescriptionEN>returns current stamina amount.</DescriptionEN>
			<DescriptionCN>返回当前耐力值</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetTurnRate" signature="float GetTurnRate()">
			<DescriptionEN>returns unit's turn rate in degrees per second</DescriptionEN>
			<DescriptionCN>返回单位转身速度，单位为度每秒</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>float</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GetUnitName" signature="string GetUnitName()">
			<DescriptionEN>get the unit name for this unit.</DescriptionEN>
			<DescriptionCN>返回单位名字</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>string</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="GrantItem" signature="void GrantItem(string a, bool b)">
			<DescriptionEN>( sItemName ) - grant an item to the unit by name.</DescriptionEN>
			<DescriptionCN>授予单位物品</DescriptionCN>
			<HowToCall>
				<Parameter>a：物品名称，b：不明</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsBlocking" signature="bool IsBlocking()">
			<DescriptionEN>Is this unit blocking?</DescriptionEN>
			<DescriptionCN>单位是否正在格挡（不确定）</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return>bool</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="IsFacing" signature="bool IsFacing(Vector a, float b)">
			<DescriptionEN>( vecTargetPosition, flAngleTolerance ) - returns true if the unit is within flAngleTolerance degrees of the target position</DescriptionEN>
			<DescriptionCN>参数为（Vector目标点，float允许角度差）如果单位朝向目标角度低于角度差则返还true</DescriptionCN>
			<HowToCall>
				<Parameter>a：目标点，b：允许角度差</Parameter>
				<Return>bool</Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetBlocking" signature="void SetBlocking(bool a)">
			<DescriptionEN>( bShouldBlock ) - Set the blocking state of this unit.</DescriptionEN>
			<DescriptionCN>设置单位格挡状态（不确定）</DescriptionCN>
			<HowToCall>
				<Parameter>a：布尔值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		<function name="SetMaxSpeed" signature="void SetMaxSpeed(float a)">
			<DescriptionEN>( flMaxSpeed ) - sets unit's max speed</DescriptionEN>
			<DescriptionCN>设置单位最大速度</DescriptionCN>
			<HowToCall>
				<Parameter>a：浮点数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetMovementTargetEntity" signature="void SetMovementTargetEntity(handle a, float b)">
			<DescriptionEN>( hTargetEntity, flTargetRange ) - Try to move this unit to the given range from the target entity.</DescriptionEN>
			<DescriptionCN>参数为（目标实体，跟随范围）单位向目标实体移动直到抵达指定范围内</DescriptionCN>
			<HowToCall>
				<Parameter>a：实体句柄，b：范围</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetMovementTargetPosition" signature="void SetMovementTargetPosition(Vector a, float b)">
			<DescriptionEN>( vecTargetPosition, flTargetRange ) - Try to move this unit to the given range from the target point.</DescriptionEN>
			<DescriptionCN>参数为（目标点，跟随范围）单位向目标点移动直到抵达指定范围内</DescriptionCN>
			<HowToCall>
				<Parameter>a：目标点，b：范围</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetSensingSphereRange" signature="void SetSensingSphereRange(float a)">
			<DescriptionEN>( flSightRange ) - set range of unit's 360 degree sensing sphere</DescriptionEN>
			<DescriptionCN>设置单位的360度感应球体范围</DescriptionCN>
			<HowToCall>
				<Parameter>a：范围数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetSightConeAngle" signature="void SetSightConeAngle(float a)">
			<DescriptionEN>( flAngleDegrees ) - sets angle in which the unit can see things up to sight range</DescriptionEN>
			<DescriptionCN>设置单位的视野锥夹角</DescriptionCN>
			<HowToCall>
				<Parameter>a：角度数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetSightConeRange" signature="void SetSightConeRange(float a)">
			<DescriptionEN>( fRange ) - set range of unit's sight cone</DescriptionEN>
			<DescriptionCN>设置单位的视野锥范围</DescriptionCN>
			<HowToCall>
				<Parameter>a：范围数值</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
		
		<function name="SetTurnRate" signature="void SetTurnRate(float a)">
			<DescriptionEN>( flTurnRate ) - sets unit's turn rate in degrees per second</DescriptionEN>
			<DescriptionCN>设置单位转向速率（度每秒）</DescriptionCN>
			<HowToCall>
				<Parameter>a：转向速度</Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>	
	</functions>
</class>

<class nameEN="CDOTABaseGameMode" nameCN="DOTA基础游戏模式"
	descriptionEN=""
	descriptionCN="" extends="CBaseEntity">
	<functions>
	<function name="ClientLoadGridNav"
	signature="void ClientLoadGridNav()">
	  <DescriptionEN>Tell clients that they need to load gridnav
	  information. Used for things like allowing clients to identify
	  valid locations to place buildings.</DescriptionEN>
	  <DescriptionCN>通知客户端需要载入网格信息，可用于允许客户端确定允许建筑的区域等</DescriptionCN>
	  <HowToCall>
		<Parameter></Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetAlwaysShowPlayerInventory"
	signature="void SetAlwaysShowPlayerInventory(bool a)">
	  <DescriptionEN>Show the player hero's inventory in the HUD,
	  regardless of what unit is selected.</DescriptionEN>
	  <DescriptionCN>在HUD中显示玩家英雄的物品栏，不管选择了哪个单位</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetBotThinkingEnabled"
	signature="void SetBotThinkingEnabled(bool a)">
	  <DescriptionEN>Enables/Disables bot thinking. Requires a very
	  Dota PvP-like map with 3 lanes, a shop, etc.</DescriptionEN>
	  <DescriptionCN>允许/禁止机器人思考，需要与Dota
	  PvP高度相似的三路线地图、商店等</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetBuybackEnabled"
	signature="void SetBuybackEnabled(bool a)">
	  <DescriptionEN>Enables or disables buyback
	  completely</DescriptionEN>
	  <DescriptionCN>完全允许/禁止买活</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetCameraDistanceOverride"
	signature="void SetCameraDistanceOverride(float a)">
	  <DescriptionEN>Set a different camera distance; dota default is
	  1134.</DescriptionEN>
	  <DescriptionCN>设置默认的镜头距离。Dota默认为1134</DescriptionCN>
	  <HowToCall>
		<Parameter>float a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetCustomBuybackCooldownEnabled"
	signature="void SetCustomBuybackCooldownEnabled(bool a)">
	  <DescriptionEN>Turns on capability to define custom buyback
	  cooldowns.</DescriptionEN>
	  <DescriptionCN>开启该选项来允许自定义买活冷却时间</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetCustomBuybackCostEnabled"
	signature="void SetCustomBuybackCostEnabled(bool a)">
	  <DescriptionEN>Turns on capability to define custom buyback
	  costs.</DescriptionEN>
	  <DescriptionCN>开启该选项来允许自定义买活花费</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetCustomHeroMaxLevel"
	signature="void SetCustomHeroMaxLevel(int maxLevel)">
	  <DescriptionEN>Allows definition of the max level heroes can
	  achieve (default is 25).</DescriptionEN>
	  <DescriptionCN>定义最大英雄等级（默认为25）</DescriptionCN>
	  <HowToCall>
		<Parameter>int maxLevel</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetCustomXPRequiredToReachNextLevel"
	signature="void SetCustomXPRequiredToReachNextLevel(handle a)">
	  <DescriptionEN>Allows definition of a?table?of hero XP
	  values.</DescriptionEN>
	  <DescriptionCN>定义英雄经验值表(table)</DescriptionCN>
	  <HowToCall>
		<Parameter>handle a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetFogOfWarDisabled"
	signature="void SetFogOfWarDisabled(bool a)">
	  <DescriptionEN>Turn the fog of war on or off.</DescriptionEN>
	  <DescriptionCN>开关战争迷雾</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetGoldSoundDisabled"
	signature="void SetGoldSoundDisabled(bool a)">
	  <DescriptionEN>Turn the sound when gold is acquired off/on. Takes
	  a?bool.</DescriptionEN>
	  <DescriptionCN>是否禁止获取金钱时的声音提示</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetOverrideSelectionEntity"
	signature="void SetOverrideSelectionEntity(handle unit)">
	  <DescriptionEN>Set an override for the default selection entity,
	  instead of each player's hero.</DescriptionEN>
	  <DescriptionCN>覆盖默认选择实体，替代所有玩家的英雄</DescriptionCN>
	  <HowToCall>
		<Parameter>handle unit</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetRecommendedItemsDisabled"
	signature="void SetRecommendedItemsDisabled(bool a)">
	  <DescriptionEN>Turn the panel for showing recommended items at
	  the shop off/on. Takes a?bool.</DescriptionEN>
	  <DescriptionCN>是否禁止显示商店中的推荐购买物品</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetRemoveIllusionsOnDeath"
	signature="void SetRemoveIllusionsOnDeath(bool a)">
	  <DescriptionEN>Make it so illusions are immediately removed upon
	  death, rather than sticking around for a few
	  seconds.</DescriptionEN>
	  <DescriptionCN>使幻象死亡时立即消失，而不是延迟数秒</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetTopBarTeamValue"
	signature="void SetTopBarTeamValue(int a, int b)">
	  <DescriptionEN>Set the team values on the top game
	  bar.</DescriptionEN>
	  <DescriptionCN>设置顶端的队伍数值</DescriptionCN>
	  <HowToCall>
		<Parameter>int a, int b</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetTopBarTeamValuesOverride"
	signature="void SetTopBarTeamValuesOverride(bool a)">
	  <DescriptionEN>Override the values of the team values on the top
	  game bar.</DescriptionEN>
	  <DescriptionCN>是否覆盖顶端的队伍数值</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetTopBarTeamValuesVisible"
	signature="void SetTopBarTeamValuesVisible(bool a)">
	  <DescriptionEN>Turning on/off the team values on the top game
	  bar.</DescriptionEN>
	  <DescriptionCN>开关顶端的队伍数值</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetTowerBackdoorProtectionEnabled"
	signature="void SetTowerBackdoorProtectionEnabled(bool a)">
	  <DescriptionEN>Enables/Disables tower backdoor
	  protection</DescriptionEN>
	  <DescriptionCN>开关偷塔保护</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	
	<function name="SetUseCustomHeroLevels"
	signature="void SetUseCustomHeroLevels(bool a)">
	  <DescriptionEN>Turn on custom-defined XP values for hero level
	  ups. The?table?should be defined before switching this
	  on.</DescriptionEN>
	  <DescriptionCN>开关自定义英雄英雄经验表，该表必须提前被定义</DescriptionCN>
	  <HowToCall>
		<Parameter>bool a</Parameter>
		<Return></Return>
		<PS></PS>
	  </HowToCall>
	</function>
	</functions>
</class>

<class nameEN="CDotaQuest" nameCN="Dota任务"
	descriptionEN=""
	descriptionCN="" extends="CBaseEntity">
	<functions>
		<function name="AddSubquest"
		signature="void AddSubquest(handle a)">
		  <DescriptionEN>Add a subquest to this quest</DescriptionEN>
		  <DescriptionCN>为该任务添加子任务</DescriptionCN>
		  <HowToCall>
			<Parameter>handle a</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="CompleteQuest" signature="void CompleteQuest()">
		  <DescriptionEN>Mark this quest complete</DescriptionEN>
		  <DescriptionCN>标记该任务完成</DescriptionCN>
		  <HowToCall>
			<Parameter></Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetSubquest" signature="handle GetSubquest(int a)">
		  <DescriptionEN>Finds a subquest from this quest by
		  index</DescriptionEN>
		  <DescriptionCN>用索引号找到该任务的子任务</DescriptionCN>
		  <HowToCall>
			<Parameter>int a</Parameter>
			<Return>handle</Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetSubquestByName"
		signature="handle GetSubquestByName(string a)">
		  <DescriptionEN>Finds a subquest from this quest by
		  name</DescriptionEN>
		  <DescriptionCN>用任务名称找到该任务的子任务</DescriptionCN>
		  <HowToCall>
			<Parameter>string a</Parameter>
			<Return>handle</Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="RemoveSubquest"
		signature="void RemoveSubquest(handle a)">
		  <DescriptionEN>Remove a subquest from this quest</DescriptionEN>
		  <DescriptionCN>从该任务移除一个子任务</DescriptionCN>
		  <HowToCall>
			<Parameter>handle a</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetTextReplaceString"
		signature="void SetTextReplaceString(string a)">
		  <DescriptionEN>Set the text replace string for this
		  quest</DescriptionEN>
		  <DescriptionCN>设置该任务的文本取代字符串</DescriptionCN>
		  <HowToCall>
			<Parameter>string a</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetTextReplaceValue"
		signature="void SetTextReplaceValue(int a, int b)">
		  <DescriptionEN>Set a quest value</DescriptionEN>
		  <DescriptionCN>设置任务数值</DescriptionCN>
		  <HowToCall>
			<Parameter>int a, int b</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CDotaSubquestBase" nameCN="Dota子任务"
	descriptionEN=""
	descriptionCN="" extends="CDotaQuest">
	<functions>
		<function name="CompleteSubquest"
		signature="void CompleteSubquest()">
		  <DescriptionEN>Mark this subquest complete</DescriptionEN>
		  <DescriptionCN>完成子任务</DescriptionCN>
		  <HowToCall>
			<Parameter></Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetTextReplaceString"
		signature="void SetTextReplaceString(string a)">
		  <DescriptionEN>Set the text replace string for this subquest</DescriptionEN>
		  <DescriptionCN>设置该子任务的文本取代字符串</DescriptionCN>
		  <HowToCall>
			<Parameter>string a</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		<function name="SetTextReplaceValue"
		signature="void SetTextReplaceValue(int a, int b)">
		  <DescriptionEN>Set a subquest value</DescriptionEN>
		  <DescriptionCN>设置子任务数值</DescriptionCN>
		  <HowToCall>
			<Parameter>int a, int b</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CPhysicsComponent" nameCN="物理组件"
	descriptionEN=""
	descriptionCN="" extends="CDotaQuest">
	<functions>
		<function name="ExpensiveInstantRayCast"
		signature="bool ExpensiveInstantRayCast(Vector a, Vector b, handle c)">
		  <DescriptionEN>Do an instant (i.e. blocking) Ray Cast. Will do a handle/queue version later. Don't plan to use this for real!</DescriptionEN>
		  <DescriptionCN>进行一个立即（即阻挡）的光线投射，稍后会有handle/queue版本，并不计划实际使用这个！</DescriptionCN>
		  <HowToCall>
			<Parameter>Vector a, Vector b, handle c</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CPointTemplate" nameCN="点模板"
	descriptionEN=""
	descriptionCN="" extends="CDotaQuest">
	<functions>
		<function name="DeleteCreatedSpawnGroups()"
		signature="void DeleteCreatedSpawnGroups()">
		  <DescriptionEN>DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this.</DescriptionEN>
		  <DescriptionCN>删除任何该点模板的刷新组。提示：并不删除点模板</DescriptionCN>
		  <HowToCall>
			<Parameter></Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="ForceSpawn"
		signature="void ForceSpawn()">
		  <DescriptionEN>ForceSpawn() : Spawns all of the entities the point_template is pointing at.</DescriptionEN>
		  <DescriptionCN>强制刷新该点模板指向的全部实体</DescriptionCN>
		  <HowToCall>
			<Parameter></Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetSpawnedEntities"
		signature="handle GetSpawnedEntities()">
		  <DescriptionEN>GetSpawnedEntities() : Get the list of the most recent spawned entities</DescriptionEN>
		  <DescriptionCN>获取最近被刷新的实体</DescriptionCN>
		  <HowToCall>
			<Parameter></Parameter>
			<Return>handle</Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetSpawnCallback()"
		signature="void SetSpawnCallback(handle a, handle b)">
		  <DescriptionEN>SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array.</DescriptionEN>
		  <DescriptionCN>设置刷新回调（hCallbackFunc, hCallbackScope, hCallbackData ），当模板产生实体时回调。被刷新的实体作为数组被传入</DescriptionCN>
		  <HowToCall>
			<Parameter>handle a, handle b</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CBodyComponent" nameCN="身体组件"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
        <function name="AddImpulseAtPosition"
		signature="void AddImpulseAtPosition(Vector a, Vector b)">
		  <DescriptionEN>Apply an impulse at a worldspace position to the
		  physics</DescriptionEN>
		  <DescriptionCN>在指定的世界位置施加一个物理推动</DescriptionCN>
		  <HowToCall>
			<Parameter>Vector a, Vector b</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="AddVelocity"
		signature="void AddVelocity(Vector a, Vector b)">
		  <DescriptionEN>Add linear and angular velocity to the physics
		  object</DescriptionEN>
		  <DescriptionCN>为物理物件增加一个线速度或角速度</DescriptionCN>
		  <HowToCall>
			<Parameter>Vector a, Vector b</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="DetachFromParent"
		signature="void DetachFromParent()">
		  <DescriptionEN>Detach from its parent</DescriptionEN>
		  <DescriptionCN>从其父项（parent）中分离</DescriptionCN>
		  <HowToCall>
			<Parameter></Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetSequence" signature="&lt;&gt;GetSequence()">
		  <DescriptionEN>Returns the active sequence</DescriptionEN>
		  <DescriptionCN>返回激活的序列（sequence）</DescriptionCN>
		  <HowToCall>
			<Parameter></Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="IsAttachedToParent"
		signature="bool IsAttachedToParent()">
		  <DescriptionEN>Is attached to parent</DescriptionEN>
		  <DescriptionCN>是否依附父项（parent）</DescriptionCN>
		  <HowToCall>
			<Parameter></Parameter>
			<Return>bool</Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="LookupSequence"
		signature="&lt;&gt;LookupSequence(string a)">
		  <DescriptionEN>Returns a sequence id given a name</DescriptionEN>
		  <DescriptionCN>输入名字返回序列（sequence）ID</DescriptionCN>
		  <HowToCall>
			<Parameter>string a</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SequenceDuration"
		signature="float SequenceDuration(string a)">
		  <DescriptionEN>Returns the duration in seconds of the specified
		  sequence</DescriptionEN>
		  <DescriptionCN>按秒数返回指定序列（sequence）的持续时间</DescriptionCN>
		  <HowToCall>
			<Parameter>string a</Parameter>
			<Return>float</Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetAngularVelocity"
		signature="void SetAngularVelocity(Vector a)">
		  <DescriptionEN>No Description Set</DescriptionEN>
		  <DescriptionCN>暂无描述</DescriptionCN>
		  <HowToCall>
			<Parameter>Vector a</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetAnimation"
		signature="void SetAnimation(string a)">
		  <DescriptionEN>Pass string for the animation to play on this
		  model</DescriptionEN>
		  <DescriptionCN>输入动画名称播放动作，需要模型拥有该动画</DescriptionCN>
		  <HowToCall>
			<Parameter>string a</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetBodyGroup"
		signature="void SetBodyGroup(string a)">
		  <DescriptionEN>No Description Set</DescriptionEN>
		  <DescriptionCN>暂无描述</DescriptionCN>
		  <HowToCall>
			<Parameter>string a</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetMaterialGroup"
		signature="void SetMaterialGroup(utlstringtoken a)">
		  <DescriptionEN>No Description Set</DescriptionEN>
		  <DescriptionCN>暂无描述</DescriptionCN>
		  <HowToCall>
			<Parameter>utlstringtoken a</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetVelocity"
		signature="void SetVelocity(Vector velocity)">
		  <DescriptionEN>No Description Set</DescriptionEN>
		  <DescriptionCN>暂无描述</DescriptionCN>
		  <HowToCall>
			<Parameter>Vector velocity</Parameter>
			<Return></Return>
			<PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CBaseAnimating" nameCN="基础动画"
	descriptionEN=""
	descriptionCN="" extends="CBaseEntity">
	<functions>
		<function name="GetAttachmentAngles"
		signature="Vector GetAttachmentAngles(int a)">
		  <DescriptionEN>Get the attachement id's angles as a p,y,r
		  vector</DescriptionEN>
		  <DescriptionCN>获得指定ID附件的角度，返回vector(p,y,r)</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetAttachmentOrigin"
		signature="Vector GetAttachmentOrigin(int a)">
		  <DescriptionEN>Get the attachement id's origin
		  vector</DescriptionEN>
		  <DescriptionCN>获得指定ID附件的源vector</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="IsSequenceFinished"
		signature="bool IsSequenceFinished()">
		  <DescriptionEN>Ask whether the main sequence is done
		  playing</DescriptionEN>
		  <DescriptionCN>查询主序列是否播放结束</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="ScriptLookupAttachment"
		signature="int ScriptLookupAttachment(string a)">
		  <DescriptionEN>Get the named attachment id</DescriptionEN>
		  <DescriptionCN>获得指定名序列的ID</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a</Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetBodygroup"
		signature="void SetBodygroup(int a, int b)">
		  <DescriptionEN>Sets a bodygroup</DescriptionEN>
		  <DescriptionCN>设置一个bodygroup</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a, int b</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetModelScale"
		signature="void SetModelScale(float scale)">
		  <DescriptionEN>Sets the model's scale to scale,so if a unit had
		  its model scale at 1, and you use?SetModelScale(10.0), it would
		  set the scale to 10.0.</DescriptionEN>
		  <DescriptionCN>
		  设置模型放大率。如果模型缩放为1，使用SetModelScale(10.0)将放大率设置成10.0.</DescriptionCN>
		  <HowToCall>
		    <Parameter>float scale</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetPoseParameter"
		signature="float SetPoseParameter(string a, float b)">
		  <DescriptionEN>Set the specified pose parameter to the specified
		  value</DescriptionEN>
		  <DescriptionCN>将指定的位置参数（pose parameter）设定为指定值</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a, float b</Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CBaseCombatCharacter" nameCN="基础战斗角色"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="GetEquippedWeapons"
		signature="table GetEquippedWeapons()">
		  <DescriptionEN>GetEquippedWeapons(): Returns an array of all the
		  equipped weapons</DescriptionEN>
		  <DescriptionCN>GetEquippedWeapons(): 获取一个装备武器的数组</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>table</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetWeaponCount" signature="int GetWeaponCount()">
		  <DescriptionEN>GetWeaponCount(): Gets the number of weapons
		  currently equipped</DescriptionEN>
		  <DescriptionCN>GetWeaponCount(): 获取当前装备的武器数量</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="ProjectileManager" nameCN="投射物管理器"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="CreateLinearProjectile"
		signature="int CreateLinearProjectile(table infoTable)">
		  <DescriptionEN>Creates a linear projectile and returns the
		  projectile ID</DescriptionEN>
		  <DescriptionCN>创建一个线性投射物并返回其ID</DescriptionCN>
		  <HowToCall>
		    <Parameter>table infoTable</Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="CreateTrackingProjectile"
		signature="void CreateTrackingProjectile(handle a)">
		  <DescriptionEN>Creates a tracking projectile</DescriptionEN>
		  <DescriptionCN>创建一个追踪投射物</DescriptionCN>
		  <HowToCall>
		    <Parameter>handle a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="DestroyLinearProjectile"
		signature="void DestroyLinearProjectile(int a)">
		  <DescriptionEN>Destroys the linear projectile matching the
		  argument ID</DescriptionEN>
		  <DescriptionCN>摧毁指定ID的线性投射物</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="ProjectileDodge"
		signature="void ProjectileDodge(handle a)">
		  <DescriptionEN>Makes the specified unit dodge
		  projectiles</DescriptionEN>
		  <DescriptionCN>使得特定单位躲避投射物</DescriptionCN>
		  <HowToCall>
		    <Parameter>handle a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CBaseTrigger" nameCN="基础触发器"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="Disable" signature="void Disable()">
		  <DescriptionEN>Disable the trigger</DescriptionEN>
		  <DescriptionCN>禁止触发器</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Enable" signature="void Enable()">
		  <DescriptionEN>Enable the trigger</DescriptionEN>
		  <DescriptionCN>允许触发器</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="IsTouching" signature="bool IsTouching(handle a)">
		  <DescriptionEN>Checks whether the passed entity is touching the
		  trigger.</DescriptionEN>
		  <DescriptionCN>检查指定实体是否正在接触触发器</DescriptionCN>
		  <HowToCall>
		    <Parameter>handle a</Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CEnvEntityMaker" nameCN="环境实体生成器"
	descriptionEN=""
	descriptionCN="" extends="CBaseEntity">
	<functions>
		<function name="SpawnEntity" signature="void SpawnEntity()">
		  <DescriptionEN>Create an entity at the location of the
		  maker</DescriptionEN>
		  <DescriptionCN>在生成器的位置创建一个实体</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SpawnEntityAtEntityOrigin"
		signature="void SpawnEntityAtEntityOrigin(handle a)">
		  <DescriptionEN>Create an entity at the location of a specified
		  entity instance</DescriptionEN>
		  <DescriptionCN>在指定实体的位置立刻创建一个实体</DescriptionCN>
		  <HowToCall>
		    <Parameter>handle a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SpawnEntityAtLocation"
		signature="void SpawnEntityAtLocation(Vector a, Vector b)">
		  <DescriptionEN>Create an entity at a specified location and
		  orientaton, orientation is Euler angle in degrees (pitch, yaw,
		  roll)</DescriptionEN>
		  <DescriptionCN>在指定位置和方向创建一个实体，方向是角度制欧拉角(pitch, yaw,
		  roll)</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SpawnEntityAtNamedEntityOrigin"
		signature="void SpawnEntityAtNamedEntityOrigin(string a)">
		  <DescriptionEN>Create an entity at the location of a named
		  entity</DescriptionEN>
		  <DescriptionCN>在指定名字实体的位置创建一个实体</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CDOTAVoteSystem" nameCN="DOTA投票系统"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="StartVote"
		signature="void StartVote(handle a)">
		  <DescriptionEN>Get the attachement id's angles as a p,y,r
		  vector</DescriptionEN>
		  <DescriptionCN>开始投票，详细由传入的table制定</DescriptionCN>
		  <HowToCall>
		    <Parameter>handle a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CMarkupVolumeTagged" nameCN="标记卷标签"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="HasTag"
		signature="bool HasTag(string a)">
		  <DescriptionEN>Does this volume have the given tag.</DescriptionEN>
		  <DescriptionCN>查询该卷是否带有指定标签</DescriptionCN>
		  <HowToCall>
		    <Parameter>handle a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CScriptPrecacheContext" nameCN="脚本预读内容"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="AddResource"
		signature="void AddResource(string a)">
		  <DescriptionEN>Precaches a specific resource</DescriptionEN>
		  <DescriptionCN>预缓存指定资源</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		<function name="GetValue"
		signature="table GetValue(string a)">
		  <DescriptionEN>Reads a spawn key</DescriptionEN>
		  <DescriptionCN>读取一个键值（spawn key）</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CScriptKeyValues" nameCN="脚本键值"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="GetValue"
		signature="table GetValue(string a)">
		  <DescriptionEN>Reads a spawn key</DescriptionEN>
		  <DescriptionCN>读取一个键值（spawn key）</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CScriptParticleManager" nameCN="脚本粒子管理器"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="CreateParticle"
		signature="int CreateParticle(string particleName, int particleAttach, handle owningEntity)">
		
		  <DescriptionEN>Creates a new particle effect</DescriptionEN>
		  <DescriptionCN>创建一个新的粒子特效</DescriptionCN>
		  <HowToCall>
		    <Parameter>string particleName, int particleAttach, handle
		    owningEntity</Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="CreateParticleForPlayer"
		signature="int CreateParticleForPlayer(string particleName, int particleAttach, handle owningEntity, handle owningPlayer)">
		
		  <DescriptionEN>Creates a new particle effect that only plays for
		  the specified player</DescriptionEN>
		  <DescriptionCN>创建一个只对指定玩家播放的粒子特效</DescriptionCN>
		  <HowToCall>
		    <Parameter>string particleName, int particleAttach, handle
		    owningEntity, handle owningPlayer</Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetParticleReplacement"
		signature="string GetParticleReplacement(string a, handle b)">
		  <DescriptionEN>No Description Set</DescriptionEN>
		  <DescriptionCN>暂无描述</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a, handle b</Parameter>
		    <Return>string</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		<function name="ReleaseParticleIndex"
		signature="void ReleaseParticleIndex(int particleId)">
		  <DescriptionEN>Frees the specified particle index</DescriptionEN>
		  <DescriptionCN>施放指定粒子特效索引号</DescriptionCN>
		  <HowToCall>
		    <Parameter>int particleId</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetParticleAlwaysSimulate"
		signature="void SetParticleAlwaysSimulate(int a)">
		  <DescriptionEN>No Description Set</DescriptionEN>
		  <DescriptionCN>暂无描述</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetParticleControl"
		signature="void SetParticleControl(int particleId, int controlIndex, Vector controlData)">
		
		  <DescriptionEN>Set the control point data for a control on a
		  particle effect</DescriptionEN>
		  <DescriptionCN>设置控制粒子特效的控制点数据</DescriptionCN>
		  <HowToCall>
		    <Parameter>int particleId, int controlIndex, Vector
		    controlData</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetParticleControlEnt"
		signature="void SetParticleControlEnt(int a, int b, handle c, int d, string e, Vector f, bool g)">
		
		  <DescriptionEN>No Description Set</DescriptionEN>
		  <DescriptionCN>暂无描述</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a, int b, handle c, int d, string e, Vector f,
		    bool g</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CScriptHeroList" nameCN="脚本英雄列表"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="GetAllHeroes" signature="table GetAllHeroes()">
		  <DescriptionEN>Returns all the heroes in the
		  world</DescriptionEN>
		  <DescriptionCN>返回当前世界全部英雄</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>table</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetHero" signature="handle GetHero(int heroId)">
		  <DescriptionEN>Get the Nth hero in the Hero List</DescriptionEN>
		  <DescriptionCN>获取英雄列表中第N位英雄</DescriptionCN>
		  <HowToCall>
		    <Parameter>int heroId：英雄ID</Parameter>
		    <Return>handle</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetHeroCount" signature="int GetHeroCount()">
		  <DescriptionEN>Returns the number of heroes in the
		  world</DescriptionEN>
		  <DescriptionCN>返回当前世界英雄数目</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CNativeOutputs" nameCN="原生输出"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="AddOutput"
		signature="void AddOutput(string a, string b)">
		  <DescriptionEN>Add an output</DescriptionEN>
		  <DescriptionCN>增加一个输出</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a, string b</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Init" signature="void Init(int a)">
		  <DescriptionEN>Initialize with number of outputs</DescriptionEN>
		  <DescriptionCN>初始化输出</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CEnvProjectedTexture" nameCN="环境投影纹理"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="SetFarRange" signature="void SetFarRange(float a)">
		  <DescriptionEN>Set light maximum range</DescriptionEN>
		  <DescriptionCN>设置光照最大距离</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetLinearAttenuation"
		signature="void SetLinearAttenuation(float a)">
		  <DescriptionEN>Set light linear attenuation value</DescriptionEN>
		  <DescriptionCN>设置光照线性淡化值</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetNearRange"
		signature="void SetNearRange(float a)">
		  <DescriptionEN>Set light minimum range</DescriptionEN>
		  <DescriptionCN>设置光照最小距离</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetQuadraticAttenuation"
		signature="void SetQuadraticAttenuation(float a)">
		  <DescriptionEN>Set light quadratic attenuation
		  value</DescriptionEN>
		  <DescriptionCN>设置光照二次项淡化值</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetVolumetrics"
		signature="void SetVolumetrics(bool a, float b, float c, int d, float e)">
		
		  <DescriptionEN>Turn on/off light volumetrics: bool bOn, float
		  flIntensity, float flNoise, int nPlanes, float
		  flPlaneOffset</DescriptionEN>
		  <DescriptionCN>开关体积光参数: bool bOn, float flIntensity, float
		  flNoise, int nPlanes, float flPlaneOffset</DescriptionCN>
		  <HowToCall>
		    <Parameter>bool a, float b, float c, int d, float e</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>


<class nameEN="CInfoData" nameCN="信息数据"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="QueryColor"
		signature="Vector QueryColor(utlstringtoken a, Vector b)">
		  <DescriptionEN>Query color data for this key</DescriptionEN>
		  <DescriptionCN>查询该键值颜色数据</DescriptionCN>
		  <HowToCall>
		    <Parameter>utlstringtoken a, Vector b</Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="QueryFloat"
		signature="float QueryFloat(utlstringtoken a, float b)">
		  <DescriptionEN>Query float data for this key</DescriptionEN>
		  <DescriptionCN>查询该键值浮点（float）数据</DescriptionCN>
		  <HowToCall>
		    <Parameter>utlstringtoken a, float b</Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="QueryInt"
		signature="int QueryInt(utlstringtoken a, int b)">
		  <DescriptionEN>Query int data for this key</DescriptionEN>
		  <DescriptionCN>查询该键值整型（int）数据</DescriptionCN>
		  <HowToCall>
		    <Parameter>utlstringtoken a, int b</Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="QueryNumber"
		signature="float QueryNumber(utlstringtoken a, float b)">
		  <DescriptionEN>Query number data for this key</DescriptionEN>
		  <DescriptionCN>查询该键值数值数据</DescriptionCN>
		  <HowToCall>
		    <Parameter>utlstringtoken a, float b</Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="QueryString"
		signature="string QueryString(utlstringtoken a, string b)">
		  <DescriptionEN>Query string data for this key</DescriptionEN>
		  <DescriptionCN>查询该键值字符串（string）数据</DescriptionCN>
		  <HowToCall>
		    <Parameter>utlstringtoken a, string b</Parameter>
		    <Return>string</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="QueryVector"
		signature="Vector QueryVector(utlstringtoken a, Vector b)">
		  <DescriptionEN>Query vector data for this key</DescriptionEN>
		  <DescriptionCN>查询该键值矢量（vector）数据</DescriptionCN>
		  <HowToCall>
		    <Parameter>utlstringtoken a, Vector b</Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CPhysicsProp" nameCN="物理元件"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="DisableMotion" signature="void DisableMotion()">
			<DescriptionEN>Enable motion for the prop</DescriptionEN>
			<DescriptionCN>禁止该元件运动</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS>原文有误</PS>
			</HowToCall>
		</function>
		
		<function name="EnableMotion" signature="void EnableMotion()">
			<DescriptionEN>Enable motion for the prop</DescriptionEN>
			<DescriptionCN>允许该元件运动</DescriptionCN>
			<HowToCall>
				<Parameter></Parameter>
				<Return></Return>
				<PS></PS>
			</HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CDOTAGamerules" nameCN="DOTA游戏规则"
	descriptionEN="Global accessor variable: GameRules"
	descriptionCN="全局存储器变量：GameRules" extends="">
	<functions>
		<function name="Defeated" signature="void Defeated()">
		  <DescriptionEN>Kills the ancient, etc.</DescriptionEN>
		  <DescriptionCN>摧毁遗迹等</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="DidMatchSignoutTimeOut"
		signature="bool DidMatchSignoutTimeOut()">
		  <DescriptionEN>true when we have waited some time after end of
		  the game and not received signout</DescriptionEN>
		  <DescriptionCN>当游戏结束，等待弹窗时为真</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetCustomGameDifficulty"
		signature="int GetCustomGameDifficulty()">
		  <DescriptionEN>Returns the difficulty level of the custom game
		  mode</DescriptionEN>
		  <DescriptionCN>返回自定义游戏模式难度</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetDifficulty" signature="int GetDifficulty()">
		  <DescriptionEN>Returns difficulty level of the custom game
		  mode</DescriptionEN>
		  <DescriptionCN>返回自定义游戏模式难度</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetDroppedItem"
		signature="handle GetDroppedItem(int dropIndex)">
		  <DescriptionEN>Gets the Xth dropped item</DescriptionEN>
		  <DescriptionCN>获得第X个掉落物品</DescriptionCN>
		  <HowToCall>
		    <Parameter>int dropIndex</Parameter>
		    <Return>handle</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetGameModeEntity"
		signature="handle GetGameModeEntity()">
		  <DescriptionEN>Get the game mode entity</DescriptionEN>
		  <DescriptionCN>设置游戏模式实体</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>handle</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetGameTime" signature="float GetGameTime()">
		  <DescriptionEN>Returns the number of seconds elapsed since map
		  start. This time doesn't count up when the game is
		  paused</DescriptionEN>
		  <DescriptionCN>返回游戏开始后经过的秒数，暂停时间不计算在内</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetMatchSignoutComplete"
		signature="bool GetMatchSignoutComplete()">
		  <DescriptionEN>Have we received the post match signout message
		  that includes reward information</DescriptionEN>
		  <DescriptionCN>是否已经接受包含回报信息的弹窗</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetNianFightStartTime"
		signature="float GetNianFightStartTime()">
		  <DescriptionEN>Gets the start time for the Nian
		  fight</DescriptionEN>
		  <DescriptionCN>获得年兽大战开始时间</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetNianTotalDamageTaken"
		signature="int GetNianTotalDamageTaken()">
		  <DescriptionEN>For New Bloom, get total damage taken by the Nian
		  / Year Beast</DescriptionEN>
		  <DescriptionCN>芳晓活动，获得年兽受到的总伤害</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetTimeOfDay" signature="float GetTimeOfDay()">
		  <DescriptionEN>Get the time of day</DescriptionEN>
		  <DescriptionCN>获取一天中的时间（游戏时间）</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="IsDaytime" signature="bool IsDaytime()">
		  <DescriptionEN>Is it day time.</DescriptionEN>
		  <DescriptionCN>是否是白天</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="MakeTeamLose"
		signature="void MakeTeamLose(int team)">
		  <DescriptionEN>Makes ths specified team lose</DescriptionEN>
		  <DescriptionCN>使指定队伍失败</DescriptionCN>
		  <HowToCall>
		    <Parameter>int team</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="NumDroppedItems" signature="int NumDroppedItems()">
		  <DescriptionEN>Returns the number of items currently dropped on
		  the ground</DescriptionEN>
		  <DescriptionCN>返回当前掉落在地面的物品数量</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Playtesting_UpdateAddOnKeyValues"
		signature="void Playtesting_UpdateAddOnKeyValues()">
		  <DescriptionEN>Updates custom hero, unit and ability KeyValues in
		  memory with the latest values from disk</DescriptionEN>
		  <DescriptionCN>从磁盘数据中更新自定义英雄、单位、技能的键值</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="ResetDefeated" signature="void ResetDefeated()">
		  <DescriptionEN>Restart after killing the ancient,
		  etc.</DescriptionEN>
		  <DescriptionCN>遗迹摧毁后重新开始</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="ResetToHeroSelection"
		signature="void ResetToHeroSelection()">
		  <DescriptionEN>Restart the game at hero selection</DescriptionEN>
		  <DescriptionCN>重新开始时选择英雄</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SendCustomMessage"
		signature="void SendCustomMessage(string message, int teamID, int unknown(1?))">
		  <DescriptionEN>Displays a line of text in the left textbox (where
		  usually deaths/denies/buysbacks are announced). This function
		  takes restricted HTML as input!
		  (&lt;br&gt;,&lt;u&gt;,&lt;font&gt;)</DescriptionEN>
		  <DescriptionCN>
		  在左侧文本框显示一行文本，通常用来提示死亡、反补队友、买活等信息。使用严格HTML格式(&lt;br&gt;,&lt;u&gt;,&lt;font&gt;)</DescriptionCN>
		  <HowToCall>
		    <Parameter>string message, int teamID, int
		    unknown(1?</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetCreepMinimapIconScale"
		signature="void SetCreepMinimapIconScale(float scale)">
		  <DescriptionEN>Scale the creep icons on the
		  minimap.</DescriptionEN>
		  <DescriptionCN>在小地图上缩放中立生物图标</DescriptionCN>
		  <HowToCall>
		    <Parameter>float scale</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetCustomGameDifficulty"
		signature="void SetCustomGameDifficulty(int a)">
		  <DescriptionEN>Set the difficulty level of the custom game
		  mode</DescriptionEN>
		  <DescriptionCN>设置自定义游戏模式难度等级</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetFirstBloodActive"
		signature="void SetFirstBloodActive(bool a)">
		  <DescriptionEN>Sets whether First Blood has been
		  triggered.</DescriptionEN>
		  <DescriptionCN>设置第一滴血是否已经产生</DescriptionCN>
		  <HowToCall>
		    <Parameter>bool a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetGameWinner"
		signature="void SetGameWinner(int team)">
		  <DescriptionEN>Makes ths specified team win</DescriptionEN>
		  <DescriptionCN>使指定队伍胜利</DescriptionCN>
		  <HowToCall>
		    <Parameter>int team</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetGoldPerTick"
		signature="void SetGoldPerTick(int a)">
		  <DescriptionEN>Set the auto gold increase per timed
		  interval.</DescriptionEN>
		  <DescriptionCN>设置每个时间间隔获得的金币</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetGoldTickTime"
		signature="void SetGoldTickTime(float a)">
		  <DescriptionEN>Set the time?interval between auto gold
		  increases.</DescriptionEN>
		  <DescriptionCN>设置获得金币的时间周期</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetHeroMinimapIconSize"
		signature="void SetHeroMinimapIconSize(int iconSize)">
		  <DescriptionEN>(nMinimapHeroIconSize) - Set the hero minimap icon
		  size.</DescriptionEN>
		  <DescriptionCN>设置小地图英雄图标尺寸</DescriptionCN>
		  <HowToCall>
		    <Parameter>int iconSize</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetHeroRespawnEnabled"
		signature="void SetHeroRespawnEnabled(bool canRespawn)">
		  <DescriptionEN>Control if the normal DOTA hero respawn rules
		  apply.</DescriptionEN>
		  <DescriptionCN>设置是否使用默认英雄复活规则</DescriptionCN>
		  <HowToCall>
		    <Parameter>bool canRespawn</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetHeroSelectionTime"
		signature="void SetHeroSelectionTime(float time)">
		  <DescriptionEN>Sets the amount of time players have to pick their
		  hero.</DescriptionEN>
		  <DescriptionCN>设置选择英雄的时间</DescriptionCN>
		  <HowToCall>
		    <Parameter>float time</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetNianFightStartTime"
		signature="void SetNianFightStartTime(float a)">
		  <DescriptionEN>Sets the start time for the Nian
		  fight</DescriptionEN>
		  <DescriptionCN>设置年兽大战开始时间</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetOverlayHealthBarUnit"
		signature="void SetOverlayHealthBarUnit(handle unit, int style)">
		  <DescriptionEN>Show this unit's health on the overlay health
		  bar</DescriptionEN>
		  <DescriptionCN>在前端蒙版生命条上显示单位生命值</DescriptionCN>
		  <HowToCall>
		    <Parameter>handle unit, int style</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetPostGameTime"
		signature="void SetPostGameTime(float time)">
		  <DescriptionEN>Sets the amount of time players have between the
		  game ending and the server disconnecting them.</DescriptionEN>
		  <DescriptionCN>设置在结束游戏后服务器与玩家断线前的时间</DescriptionCN>
		  <HowToCall>
		    <Parameter>float time</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetPreGameTime"
		signature="void SetPreGameTime(float time)">
		  <DescriptionEN>Sets the amount of time players have between
		  picking their hero and game start.</DescriptionEN>
		  <DescriptionCN>设置选择英雄与开始游戏之间的时间</DescriptionCN>
		  <HowToCall>
		    <Parameter>float time</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetRuneMinimapIconScale"
		signature="void SetRuneMinimapIconScale(float scale)">
		  <DescriptionEN>Scale the rune icons on the
		  minimap.</DescriptionEN>
		  <DescriptionCN>缩放小地图神符图标</DescriptionCN>
		  <HowToCall>
		    <Parameter>float scale</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetRuneSpawnTime"
		signature="void SetRuneSpawnTime(float time)">
		  <DescriptionEN>Sets the amount of time between rune
		  spawns.</DescriptionEN>
		  <DescriptionCN>设置神符刷新时间</DescriptionCN>
		  <HowToCall>
		    <Parameter>float time</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetSafeToLeave"
		signature="void SetSafeToLeave(bool safeToLeave)">
		  <DescriptionEN>Mark this game as safe to leave.</DescriptionEN>
		  <DescriptionCN>标记游戏可安全离开</DescriptionCN>
		  <HowToCall>
		    <Parameter>bool safeToLeave</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetSameHeroSelectionEnabled"
		signature="void SetSameHeroSelectionEnabled(bool enabled)">
		  <DescriptionEN>When true, players can repeatedly pick the same
		  hero.</DescriptionEN>
		  <DescriptionCN>允许选择重复英雄</DescriptionCN>
		  <HowToCall>
		    <Parameter>bool enabled</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetTimeOfDay"
		signature="void SetTimeOfDay(float time)">
		  <DescriptionEN>Set the time of day.</DescriptionEN>
		  <DescriptionCN>设置一天中的时间（游戏时间）</DescriptionCN>
		  <HowToCall>
		    <Parameter>float time</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetTreeRegrowTime"
		signature="void SetTreeRegrowTime(float time)">
		  <DescriptionEN>Sets the tree regrow time in
		  seconds.</DescriptionEN>
		  <DescriptionCN>设置树重新生长的时间（秒）</DescriptionCN>
		  <HowToCall>
		    <Parameter>float time</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetUseBaseGoldBountyOnHeroes"
		signature="void SetUseBaseGoldBountyOnHeroes(bool a)">
		  <DescriptionEN>Heroes will use the basic NPC functionality for
		  determining their bounty, rather than DOTA specific
		  formulas.</DescriptionEN>
		  <DescriptionCN>英雄将使用基础NPC规则来决定赏金，而不是DOTA指定规则</DescriptionCN>
		  <HowToCall>
		    <Parameter>bool a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetUseCustomHeroXPValues"
		signature="void SetUseCustomHeroXPValues(bool a)">
		  <DescriptionEN>Allows heroes in the map to give a specific amount
		  of XP (this value must be set).</DescriptionEN>
		  <DescriptionCN>允许英雄提供指定数目的经验值（必须先设置）</DescriptionCN>
		  <HowToCall>
		    <Parameter>bool a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetUseUniversalShopMode"
		signature="void SetUseUniversalShopMode(bool enabled)">
		  <DescriptionEN>When true, all items are available at as long as
		  any shop is in range, including Secret Shop items</DescriptionEN>
		  <DescriptionCN>为真时，所有物品当处于任意商店范围内时都能购买到，包括秘密商店物品</DescriptionCN>
		  <HowToCall>
		    <Parameter>bool enabled</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="State_Get" signature="&lt;&gt;State_Get()">
		  <DescriptionEN>Get the current Gamerules state</DescriptionEN>
		  <DescriptionCN>获取当前游戏规则状态</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CToneMapControllerComponent" nameCN="光泽贴图控制组件"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="GetBloomScale" signature="float GetBloomScale()">
		  <DescriptionEN>Gets bloomscale for this tonemap
		  controller</DescriptionEN>
		  <DescriptionCN>获取该光泽贴图控制器（tonemap
		  controller）的泛光缩放（bloomscale)</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetMaxExposure" signature="float GetMaxExposure()">
		  <DescriptionEN>Gets max exposure for this tonemap
		  controller</DescriptionEN>
		  <DescriptionCN>获取该光泽贴图控制器（tonemap controller）的最大曝光（max
		  exposure）</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetMinExposure" signature="float GetMinExposure()">
		  <DescriptionEN>Gets min exposure for this tonemap
		  controller</DescriptionEN>
		  <DescriptionCN>获取该光泽贴图控制器（tonemap controller）的最小曝光（min
		  exposure）</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetBloomScale"
		signature="void SetBloomScale(float a)">
		  <DescriptionEN>Sets bloom scale for this tonemap
		  controller</DescriptionEN>
		  <DescriptionCN>设置该光泽贴图控制器（tonemap
		  controller）的泛光缩放（bloomscale)</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetMaxExposure"
		signature="void SetMaxExposure(float a)">
		  <DescriptionEN>Sets max exposure for this tonemap
		  controller</DescriptionEN>
		  <DescriptionCN>设置该光泽贴图控制器（tonemap controller）的最大曝光（max
		  exposure）</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetMinExposure"
		signature="void SetMinExposure(float a)">
		  <DescriptionEN>Sets min exposure for this tonemap
		  controller</DescriptionEN>
		  <DescriptionCN>设置该光泽贴图控制器（tonemap controller）的最小曝光（min
		  exposure）</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CDebugOverlayScriptHelper" nameCN="蒙版DEBUG脚本辅助"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="Axis"
		signature="void Axis(Vector a, Quaternion b, float c, bool d, float e)">
		  <DescriptionEN>Draws an axis. Specify origin + orientation in
		  world space.</DescriptionEN>
		  <DescriptionCN>绘制一个轴线。在世界空间中指定出发点和方向</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Quaternion b, float c, bool d, float
		    e</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Box"
		signature="void Box(Vector a, Vector b, int c, int d, int e, int f, bool g, float h)">
		  <DescriptionEN>Draws a world-space axis-aligned box. Specify
		  bounds in world space.</DescriptionEN>
		  <DescriptionCN>绘制一个世界空间轴向盒。在世界空间中指定边界</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, int c, int d, int e, int f, bool
		    g, float h</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="BoxAngles"
		signature="void BoxAngles(Vector a, Vector b, Vector c, Quaternion d, int e, int f, int g, int h, bool i, float j)">
		  <DescriptionEN>Draws an oriented box at the origin. Specify
		  bounds in local space.</DescriptionEN>
		  <DescriptionCN>在出发点绘制一个定向盒。在世界空间中指定边界</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, Vector c, Quaternion d, int e,
		    int f, int g, int h, bool i, float j</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Capsule"
		signature="void Capsule(Vector a, Quaternion b, float c, float d, int e, int f, int g, int h, bool i, float j)">
		  <DescriptionEN>Draws a capsule. Specify base in world
		  space.</DescriptionEN>
		  <DescriptionCN>绘制一个胶囊体。在世界空间中指定基部</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Quaternion b, float c, float d, int e, int
		    f, int g, int h, bool i, float j</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Circle"
		signature="void Circle(Vector a, Quaternion b, float c, int d, int e, int f, int g, bool h, float i)">
		  <DescriptionEN>Draws a circle. Specify center in world
		  space.</DescriptionEN>
		  <DescriptionCN>绘制一个圆。在世界空间中指定中心</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Quaternion b, float c, int d, int e, int
		    f, int g, bool h, float i</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="CircleScreenOriented"
		signature="void CircleScreenOriented(Vector a, float b, int c, int d, int e, int f, bool g, float h)">
		  <DescriptionEN>Draws a circle oriented to the screen. Specify
		  center in world space.</DescriptionEN>
		  <DescriptionCN>绘制一个指向屏幕的圆。在世界空间中指定中心</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, float b, int c, int d, int e, int f, bool
		    g, float h</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Cone"
		signature="void Cone(Vector a, Vector b, float c, float d, int e, int f, int g, int h, bool i, float j)">
		  <DescriptionEN>Draws a wireframe cone. Specify endpoint and
		  direction in world space.</DescriptionEN>
		  <DescriptionCN>绘制一个线框锥形。在世界空间中指定结束点和方向</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, float c, float d, int e, int f,
		    int g, int h, bool i, float j</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Cross"
		signature="void Cross(Vector a, float b, int c, int d, int e, int f, bool g, float h)">
		  <DescriptionEN>Draws a screen-aligned cross. Specify origin in
		  world space.</DescriptionEN>
		  <DescriptionCN>绘制一个对齐屏幕的十字。在世界空间中指定出发点</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, float b, int c, int d, int e, int f, bool
		    g, float h</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Cross3D"
		signature="void Cross3D(Vector a, float b, int c, int d, int e, int f, bool g, float h)">
		  <DescriptionEN>Draws a world-aligned cross. Specify origin in
		  world space.</DescriptionEN>
		  <DescriptionCN>绘制一个对齐世界的十字。在世界空间中指定出发点</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, float b, int c, int d, int e, int f, bool
		    g, float h</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Cross3DOriented"
		signature="void Cross3DOriented(Vector a, Quaternion b, float c, int d, int e, int f, int g, bool h, float i)">
		  <DescriptionEN>Draws an oriented cross. Specify origin in world
		  space.</DescriptionEN>
		  <DescriptionCN>绘制一个指向的十字。在世界空间中指定出发点</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Quaternion b, float c, int d, int e, int
		    f, int g, bool h, float i</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="DrawTickMarkedLine"
		signature="void DrawTickMarkedLine(Vector a, Vector b, float c, int d, int e, int f, int g, int h, bool i, float j)">
		  <DescriptionEN>Draws a dashed line. Specify endpoint's in world
		  space.</DescriptionEN>
		  <DescriptionCN>绘制一个短划线。在世界空间中指定结束点</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, float c, int d, int e, int f,
		    int g, int h, bool i, float j</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="EntityAttachments"
		signature="void EntityAttachments(ehandle a, float b)">
		  <DescriptionEN>Draws the attachments of the
		  entity</DescriptionEN>
		  <DescriptionCN>绘制实体附件</DescriptionCN>
		  <HowToCall>
		    <Parameter>ehandle a, float b</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="EntityAxis"
		signature="void EntityAxis(ehandle a, float b, bool c, float d)">
		  <DescriptionEN>Draws the axis of the entity
		  origin</DescriptionEN>
		  <DescriptionCN>绘制实体源坐标轴</DescriptionCN>
		  <HowToCall>
		    <Parameter>ehandle a, float b, bool c, float d</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="EntityBounds"
		signature="void EntityBounds(ehandle a, int b, int c, int d, int e, bool f, float g)">
		  <DescriptionEN>Draws bounds of an entity</DescriptionEN>
		  <DescriptionCN>绘制实体边界</DescriptionCN>
		  <HowToCall>
		    <Parameter>ehandle a, int b, int c, int d, int e, bool f, float
		    g</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="EntitySkeleton"
		signature="void EntitySkeleton(ehandle a, float b)">
		  <DescriptionEN>Draws the skeleton of the entity</DescriptionEN>
		  <DescriptionCN>绘制实体骨架</DescriptionCN>
		  <HowToCall>
		    <Parameter>ehandle a, float b</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="EntityText"
		signature="void EntityText(ehandle a, int b, string c, int d, int e, int f, int g, float h)">
		  <DescriptionEN>Draws text on an entity</DescriptionEN>
		  <DescriptionCN>在实体上绘制文本</DescriptionCN>
		  <HowToCall>
		    <Parameter>ehandle a, int b, string c, int d, int e, int f, int
		    g, float h</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="FilledRect2D"
		signature="void FilledRect2D(Vector2D a, Vector2D b, int c, int d, int e, int f, float g)">
		  <DescriptionEN>Draws a screen-space filled 2D rectangle.
		  Coordinates are in pixels.</DescriptionEN>
		  <DescriptionCN>绘制一个2D矩形填充的屏幕空间。按照像素对齐</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector2D a, Vector2D b, int c, int d, int e, int f,
		    float g</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="HorzArrow"
		signature="void HorzArrow(Vector a, Vector b, float c, int d, int e, int f, int g, bool h, float i)">
		  <DescriptionEN>Draws a horizontal arrow. Specify endpoint's in
		  world space.</DescriptionEN>
		  <DescriptionCN>绘制一个水平箭头。在世界空间中指定结束点</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, float c, int d, int e, int f,
		    int g, bool h, float i</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Line"
		signature="void Line(Vector a, Vector b, int c, int d, int e, int f, bool g, float h)">
		  <DescriptionEN>Draws a line between two point's</DescriptionEN>
		  <DescriptionCN>绘制一个两点间连线</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, int c, int d, int e, int f, bool
		    g, float h</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Line2D"
		signature="void Line2D(Vector2D a, Vector2D b, int c, int d, int e, int f, float g)">
		  <DescriptionEN>Draws a line between two point's in
		  screenspace</DescriptionEN>
		  <DescriptionCN>绘制一个屏幕空间中亮点间连线</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector2D a, Vector2D b, int c, int d, int e, int f,
		    float g</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="PopDebugOverlayScope"
		signature="void PopDebugOverlayScope()">
		  <DescriptionEN>Pops the identifier used to group overlays.
		  Overlays marked with this identifier can be deleted in a big
		  batch.</DescriptionEN>
		  <DescriptionCN>弹出蒙版分组用的标记，被标记的蒙版可被成批删除</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="PushAndClearDebugOverlayScope"
		signature="void PushAndClearDebugOverlayScope(utlstringtoken a)">
		  <DescriptionEN>Pushes an identifier used to group overlays.
		  Deletes all existing overlays using this overlay
		  id.</DescriptionEN>
		  <DescriptionCN>推入一个蒙版分组用的标记。删除所有使用该蒙版ID的蒙版</DescriptionCN>
		  <HowToCall>
		    <Parameter>utlstringtoken a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="PushDebugOverlayScope"
		signature="void PushDebugOverlayScope(utlstringtoken a)">
		  <DescriptionEN>Pushes an identifier used to group overlays.
		  Overlays marked with this identifier can be deleted in a big
		  batch.</DescriptionEN>
		  <DescriptionCN>推入一个蒙版分组用的标记。被标记的蒙版可被成批删除</DescriptionCN>
		  <HowToCall>
		    <Parameter>utlstringtoken a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="RemoveAllInScope"
		signature="void RemoveAllInScope(utlstringtoken a)">
		  <DescriptionEN>Removes all overlays marked with a specific
		  identifier, regardless of their lifetime.</DescriptionEN>
		  <DescriptionCN>移除指定标记的全部蒙版，无视其生命周期</DescriptionCN>
		  <HowToCall>
		    <Parameter>utlstringtoken a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SolidCone"
		signature="void SolidCone(Vector a, Vector b, float c, float d, int e, int f, int g, int h, bool i, float j)">
		  <DescriptionEN>Draws a solid cone. Specify endpoint and direction
		  in world space.</DescriptionEN>
		  <DescriptionCN>绘制一个固体锥。在世界空间中指定出发点和方向</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, float c, float d, int e, int f,
		    int g, int h, bool i, float j</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Sphere"
		signature="void Sphere(Vector a, float b, int c, int d, int e, int f, bool g, float h)">
		  <DescriptionEN>Draws a wireframe sphere. Specify center in world
		  space.</DescriptionEN>
		  <DescriptionCN>绘制一个线框球体。在世界空间中指定中心</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, float b, int c, int d, int e, int f, bool
		    g, float h</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SweptBox"
		signature="void SweptBox(Vector a, Vector b, Vector c, Vector d, Quaternion e, int f, int g, int h, int i, float j)">
		  <DescriptionEN>Draws a swept box. Specify endpoint's in world
		  space and the bounds in local space.</DescriptionEN>
		  <DescriptionCN>绘制一个扫描盒。在世界空间中指定结束点并在本地空间中指定边界</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, Vector c, Vector d, Quaternion
		    e, int f, int g, int h, int i, float j</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Text"
		signature="void Text(Vector a, int b, string c, float d, int e, int f, int g, int h, float i)">
		  <DescriptionEN>Draws 2D text. Specify origin in world
		  space.</DescriptionEN>
		  <DescriptionCN>绘制2D文本。在世界空间中指定出发点</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, int b, string c, float d, int e, int f,
		    int g, int h, float i</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Texture"
		signature="void Texture(string a, Vector2D b, Vector2D c, int d, int e, int f, int g, Vector2D h, Vector2D i, float j)">
		  <DescriptionEN>Draws a screen-space texture. Coordinates are in
		  pixels.</DescriptionEN>
		  <DescriptionCN>绘制一个屏幕空间纹理。按照像素对齐</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a, Vector2D b, Vector2D c, int d, int e, int
		    f, int g, Vector2D h, Vector2D i, float j</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Triangle"
		signature="void Triangle(Vector a, Vector b, Vector c, int d, int e, int f, int g, bool h, float i)">
		  <DescriptionEN>Draws a filled triangle. Specify vertices in world
		  space.</DescriptionEN>
		  <DescriptionCN>绘制一个填充三角形。在世界空间中指定顶部</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, Vector c, int d, int e, int f,
		    int g, bool h, float i</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="UnitTestCycleOverlayRenderType"
		signature="void UnitTestCycleOverlayRenderType()">
		  <DescriptionEN>Toggles the overlay render type, for unit
		  tests</DescriptionEN>
		  <DescriptionCN>转换蒙版混合类型, 用于单位测试</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="VectorText3D"
		signature="void VectorText3D(Vector a, Quaternion b, string c, int d, int e, int f, int g, bool h, float i)">
		  <DescriptionEN>Draws 3D text. Specify origin + orientation in
		  world space.</DescriptionEN>
		  <DescriptionCN>绘制3D文本。在世界空间中指定出发点和方向</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Quaternion b, string c, int d, int e, int
		    f, int g, bool h, float i</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="VertArrow"
		signature="void VertArrow(Vector a, Vector b, float c, int d, int e, int f, int g, bool h, float i)">
		  <DescriptionEN>Draws a vertical arrow. Specify endpoint's in
		  world space.</DescriptionEN>
		  <DescriptionCN>绘制一个垂直箭头。在世界空间中指定结束点</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b, float c, int d, int e, int f,
		    int g, bool h, float i</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="YawArrow"
		signature="void YawArrow(Vector a, float b, float c, float d, int e, int f, int g, int h, bool i, float j)">
		  <DescriptionEN>Draws a arrow associated with a specific yaw.
		  Specify endpoint's in world space.</DescriptionEN>
		  <DescriptionCN>绘制一个指定偏航角的箭头。在世界空间中指定结束点</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, float b, float c, float d, int e, int f,
		    int g, int h, bool i, float j</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="CBaseFlex" nameCN="基础扭曲"
	descriptionEN="Animated characters who have vertex flex capability (Hi hex6)"
	descriptionCN="动态化拥有顶点扭曲能力(Hi hex6)的角色" extends="CBaseAnimating">
	<functions>
		<function name="GetCurrentScene"
		signature="handle GetCurrentScene()">
		
		  <DescriptionEN>Returns the instance of the oldest active scene entity (if any).</DescriptionEN>
		  <DescriptionCN>返回最早激活的场景实体的实例（如果存在的话）</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>handle</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetSceneByIndex"
		signature="handle GetSceneByIndex(int a)">
		
		  <DescriptionEN>Returns the instance of the scene entity at the specified index.</DescriptionEN>
		  <DescriptionCN>返回指定索引号的场景实体的实例</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return>handle</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="CSceneEntity" nameCN="场景实体"
	descriptionEN=""
	descriptionCN="" extends="CBaseEntity">
	<functions>
		<function name="AddBroadcastTeamTarget"
		signature="void AddBroadcastTeamTarget(int a)">
		  <DescriptionEN>Adds a team (by index) to the broadcast
		  list</DescriptionEN>
		  <DescriptionCN>在记分板列表上增加一个组（使用索引号）</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Cancel" signature="void Cancel()">
		  <DescriptionEN>Cancel scene playback</DescriptionEN>
		  <DescriptionCN>取消场景重播</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="EstimateLength" signature="float EstimateLength()">
		  <DescriptionEN>Returns length of this scene in
		  seconds.</DescriptionEN>
		  <DescriptionCN>返回场景长度（秒）</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="FindCamera" signature="handle FindCamera()">
		  <DescriptionEN>Get the camera</DescriptionEN>
		  <DescriptionCN>获取镜头</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>handle</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="FindNamedEntity"
		signature="handle FindNamedEntity(string a)">
		  <DescriptionEN>given an entity reference, such as?!target, get
		  actual entity from scene object</DescriptionEN>
		  <DescriptionCN>通过一个实体参照，比如!target，获取场景物体中的实际实体</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a</Parameter>
		    <Return>handle</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="IsPaused" signature="bool IsPaused()">
		  <DescriptionEN>If this scene is currently paused.</DescriptionEN>
		  <DescriptionCN>场景是否被暂停</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="IsPlayingBack" signature="bool IsPlayingBack()">
		  <DescriptionEN>If this scene is currently
		  playing.</DescriptionEN>
		  <DescriptionCN>场景是否正播放</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="LoadSceneFromString"
		signature="bool LoadSceneFromString(string a, string b)">
		  <DescriptionEN>given a dummy scene name and a vcd?string, load
		  the scene</DescriptionEN>
		  <DescriptionCN>输入虚拟场景名和VCD字符串，载入场景</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a, string b</Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="RemoveBroadcastTeamTarget"
		signature="void RemoveBroadcastTeamTarget(int a)">
		  <DescriptionEN>Removes a team (by index) from the broadcast
		  list</DescriptionEN>
		  <DescriptionCN>从记分板列表上移除一个组（使用索引号）</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Start" signature="void Start(handle a)">
		  <DescriptionEN>Start scene playback, takes activatorEntity as
		  param</DescriptionEN>
		  <DescriptionCN>开始场景重播，参数为激活者实体（activatorEntity）</DescriptionCN>
		  <HowToCall>
		    <Parameter>handle a</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="GridNav" nameCN="网格"
	descriptionEN="A class that can communicate with the gridnav, useful for seeing if stuff should be able to move"
	descriptionCN="与网格信息通信的类，用于检测充填物是否可以通行" extends="">
	<functions>
		<function name="GridPosToWorldCenterX"
		signature="float GridPosToWorldCenterX(int a)">
		  <DescriptionEN>Get the X position of the center of a given X
		  index</DescriptionEN>
		  <DescriptionCN>获取指定X索引号的世界中心X位置（网格到世界）</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GridPosToWorldCenterY"
		signature="float GridPosToWorldCenterY(int a)">
		  <DescriptionEN>Get the Y position of the center of a given Y
		  index</DescriptionEN>
		  <DescriptionCN>获取指定Y索引号的世界中心Y位置（网格到世界）</DescriptionCN>
		  <HowToCall>
		    <Parameter>int a</Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="IsBlocked" signature="bool IsBlocked(Vector a)">
		  <DescriptionEN>Checks whether the given position is
		  blocked</DescriptionEN>
		  <DescriptionCN>检查给定位置是否被阻挡</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a</Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="IsNearbyTree"
		signature="bool IsNearbyTree(Vector position, float radius, bool c)">
		
		  <DescriptionEN>No Description Set</DescriptionEN>
		  <DescriptionCN>暂无描述</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector position, float radius, bool c</Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="IsTraversable"
		signature="bool IsTraversable(Vector a)">
		  <DescriptionEN>Checks whether the given position is
		  traversable</DescriptionEN>
		  <DescriptionCN>检查给予维持是否可通过</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a</Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="RegrowAllTrees" signature="void RegrowAllTrees()">
		  <DescriptionEN>No Description Set</DescriptionEN>
		  <DescriptionCN>暂无描述</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="WorldToGridPosX"
		signature="int WorldToGridPosX(float a)">
		  <DescriptionEN>Get the X index of a given world X
		  position</DescriptionEN>
		  <DescriptionCN>获取指定世界X位置的X索引（世界到网格）</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="WorldToGridPosY"
		signature="int WorldToGridPosY(float a)">
		  <DescriptionEN>Get the Y index of a given world Y
		  position</DescriptionEN>
		  <DescriptionCN>获取指定世界Y位置的Y索引（世界到网格）</DescriptionCN>
		  <HowToCall>
		    <Parameter>float a</Parameter>
		    <Return>int</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
	</functions>
</class>

<class nameEN="Convars" nameCN="控制台变量"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="GetBool"
		signature="table GetBool(string variableName)">
		  <DescriptionEN>GetBool(name) : returns the convar as a boolean
		  flag.</DescriptionEN>
		  <DescriptionCN>GetBool(name) :
		  将指定的控制台变量（convar）作为boolean返回.</DescriptionCN>
		  <HowToCall>
		    <Parameter>string variableName</Parameter>
		    <Return>table</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetCommandClient"
		signature="handle GetCommandClient()">
		  <DescriptionEN>GetCommandClient() : returns the player who issued
		  this console command.</DescriptionEN>
		  <DescriptionCN>GetCommandClient() : 返回输入该控制台指令的玩家</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>handle</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetDOTACommandClient"
		signature="handle GetDOTACommandClient()">
		  <DescriptionEN>GetDOTACommandClient() : returns the DOTA player
		  who issued this console command.</DescriptionEN>
		  <DescriptionCN>GetDOTACommandClient() :
		  返回输入该控制台智力的DOTA玩家</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>handle</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetFloat"
		signature="table GetFloat(string name)">
		  <DescriptionEN>GetFloat(name) : returns the convar as a float.
		  May return nil if no such convar.</DescriptionEN>
		  <DescriptionCN>GetFloat(name) : 将指定的控制台变量（convar）作为float返回.
		  不存在时返回nil</DescriptionCN>
		  <HowToCall>
		    <Parameter>string name</Parameter>
		    <Return>table</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetInt"
		signature="table GetInt(string a)">
		  <DescriptionEN>GetInt(name) : returns the convar as an int. May
		  return nil if no such convar.</DescriptionEN>
		  <DescriptionCN>GetInt(name) : 将指定的控制台变量（convar）作为int返回.
		  不存在时返回nil</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a</Parameter>
		    <Return>table</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="GetStr"
		signature="table GetStr(string variableName)">
		  <DescriptionEN>GetStr(name) : returns the convar as a string. May
		  return nil if no such convar.</DescriptionEN>
		  <DescriptionCN>GetStr(name) : 将指定的控制台变量（convar）作为string返回.
		  不存在时返回nil</DescriptionCN>
		  <HowToCall>
		    <Parameter>string variableName</Parameter>
		    <Return>table</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="RegisterCommand"
		signature="void RegisterCommand(string variableName, handle function, string helpText, int flags)">
		
		  <DescriptionEN>RegisterCommand(name, fn, helpString, flags) :
		  register a console command.</DescriptionEN>
		  <DescriptionCN>RegisterCommand(name, fn, helpString, flags) :
		  注册一个控制台指令.</DescriptionCN>
		  <HowToCall>
		    <Parameter>string variableName, handle function, string
		    helpText, int flags</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="RegisterConvar"
		signature="void RegisterConvar(string name, string defaultValue, string helpText, int flags)">
		
		  <DescriptionEN>RegisterConvar(name, defaultValue, helpString,
		  flags): register a new console variable.</DescriptionEN>
		  <DescriptionCN>RegisterConvar(name, defaultValue, helpString,
		  flags): 注册一个新的控制台变量.</DescriptionCN>
		  <HowToCall>
		    <Parameter>string name, string defaultValue, string helpText,
		    int flags</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetBool"
		signature="void SetBool(string variableName, bool value)">
		  <DescriptionEN>SetBool(name, val) : sets the value of the convar
		  to the bool.</DescriptionEN>
		  <DescriptionCN>SetBool(name,val) :
		  将指定控制台变量（convar）设置为指定bool.</DescriptionCN>
		  <HowToCall>
		    <Parameter>string variableName, bool value</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetFloat"
		signature="void SetFloat(string variableName, float value)">
		  <DescriptionEN>SetFloat(name, val) : sets the value of the convar
		  to the float.</DescriptionEN>
		  <DescriptionCN>SetFloat(name,val) :
		  将指定控制台变量（convar）设置为指定float.</DescriptionCN>
		  <HowToCall>
		    <Parameter>string variableName, float value</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetInt"
		signature="void SetInt(string a, int b)">
		  <DescriptionEN>SetInt(name, val) : sets the value of the convar
		  to the int.</DescriptionEN>
		  <DescriptionCN>SetInt(name,val) :
		  将指定控制台变量（convar）设置为指定int.</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a, int b</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="SetStr"
		signature="void SetStr(string a, string b)">
		  <DescriptionEN>SetStr(name, val) : sets the value of the convar
		  to the string.</DescriptionEN>
		  <DescriptionCN>SetStr(name,val) :
		  将指定控制台变量（convar）设置为指定string.</DescriptionCN>
		  <HowToCall>
		    <Parameter>string a, string b</Parameter>
		    <Return></Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>

<class nameEN="Vector" nameCN="矢量"
	descriptionEN=""
	descriptionCN="" extends="">
	<functions>
		<function name="__add"
		signature="Vector __add(Vector a, Vector b)">
		  <DescriptionEN>Overloaded +. Adds vectors
		  together</DescriptionEN>
		  <DescriptionCN>重载+.矢量加运算</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b</Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="__div"
		signature="Vector __div(Vector a, Vector b)">
		  <DescriptionEN>Overloaded /. Divides vectors</DescriptionEN>
		  <DescriptionCN>重载/.矢量除运算</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b</Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="__eq" signature="bool __eq(Vector a, Vector b)">
		  <DescriptionEN>Overloaded ==. Tests for Equality</DescriptionEN>
		  <DescriptionCN>重载==.矢量比较运算</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b</Parameter>
		    <Return>bool</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="__len" signature="float __len()">
		  <DescriptionEN>Overloaded # returns the length of the
		  vector</DescriptionEN>
		  <DescriptionCN>重载#返回矢量长度</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="__mul"
		signature="Vector __mul(Vector a, Vector b)">
		  <DescriptionEN>Overloaded * returns the vectors multiplied
		  together</DescriptionEN>
		  <DescriptionCN>重载*返回矢量乘运算</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b</Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="__sub"
		signature="Vector __sub(Vector a, Vector b)">
		  <DescriptionEN>Overloaded -. Subtracts vectors</DescriptionEN>
		  <DescriptionCN>重载-.矢量减运算</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b</Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="__tostring" signature="string __tostring()">
		  <DescriptionEN>Overloaded .. Converts vectors to
		  strings</DescriptionEN>
		  <DescriptionCN>重载..转换矢量为字符串</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>string</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="_unm" signature="Vector _unm()">
		  <DescriptionEN>Overloaded - operator</DescriptionEN>
		  <DescriptionCN>重载- operator</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Cross"
		signature="Vector Cross(Vector a, Vector b)">
		  <DescriptionEN>Cross product of two vectors</DescriptionEN>
		  <DescriptionCN>矢量叉积</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b</Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Dot" signature="float Dot(Vector a, Vector b)">
		  <DescriptionEN>Dot product of two vectors</DescriptionEN>
		  <DescriptionCN>矢量点积</DescriptionCN>
		  <HowToCall>
		    <Parameter>Vector a, Vector b</Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Length" signature="float Length()">
		  <DescriptionEN>Length of the Vector</DescriptionEN>
		  <DescriptionCN>矢量长度（模）</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Length2D" signature="float Length2D()">
		  <DescriptionEN>Length of the Vector in the XY
		  plane</DescriptionEN>
		  <DescriptionCN>矢量XY平面上长度（模）</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>float</Return>
		    <PS></PS>
		  </HowToCall>
		</function>
		
		<function name="Normalized" signature="Vector Normalized()">
		  <DescriptionEN>Returns the vector normalized</DescriptionEN>
		  <DescriptionCN>返回单位矢量</DescriptionCN>
		  <HowToCall>
		    <Parameter></Parameter>
		    <Return>Vector</Return>
		    <PS></PS>
		  </HowToCall>
		</function>

	</functions>
</class>


</classes>